{
	"info": {
		"_postman_id": "615c0458-b4a4-4a8f-a932-007e4c5119e4",
		"name": "Assessment 1 Test Suite",
		"description": "Collection of endpoints to test the APIs the students create for their second assessment.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Get Empty Users",
					"item": [
						{
							"name": "Get All Users Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const userSchema = pm.environment.get('userSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of user dto\\'s',",
											"    items: { $ref: userSchema }",
											"}",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Returns an empty array', () => {",
											"    pm.expect(pm.response.json().length).to.eql(0)",
											"})"
										],
										"type": "text/javascript",
										"id": "a77093d9-612e-4fff-9a37-3b9df6016d59"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users"
									]
								},
								"description": "Initially no users have been created so this method should return an empty array.\n\nStatus Expected: success\nExpected Response: [ ] (an empty array)"
							},
							"response": []
						},
						{
							"name": "Get NonExisting User",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status error', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "9d5f923d-a19d-43bf-9265-2998a91ecc0b"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@doesNotExist",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@doesNotExist"
									]
								},
								"description": "Attempts to get a user that doesn't exist in the database (at this point in testing). Should return an error code with no response body.\n\nExpected Status: error (400s && 500s) (Preferably a 404 Not Found!)\nExpected Body: none"
							},
							"response": []
						}
					],
					"description": "Test getter endpoints before actually creating any users.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create New Users",
					"item": [
						{
							"name": "Create FirstUser Fail (No Email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success (password required)', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "b6b23910-407b-42f2-957e-7b9c7378cd6d"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n    \"username\": \"{{firstUser}}\",\n    \"password\": \"{{password}}\"\n  },\n  \"profile\": {\n    \"firstName\": \"{{firstUserFirstName}}\",\n    \"lastName\": \"{{firstUserLastName}}\",\n    \"phone\": \"{{firstUserPhone}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users"
									]
								},
								"description": "If a user tries to create a user without a password, an error code of some kind should be sent in leu of a response.\n\nExpected Status: An \"error\" status code. Somewhere in the 400s or 500s.\nNo Response Body expected. If the student adds more advanced error handling though, we should not penalize them."
							},
							"response": []
						},
						{
							"name": "Create FirstUser Fail (No Password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success (password required)', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "8ef6ff4e-9334-4552-8ad3-c06939831f46"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n    \"username\": \"{{firstUser}}\"\n  },\n  \"profile\": {\n  \t\"email\": \"{{firstUserEmail}}\",\n    \"firstName\": \"{{firstUserFirstName}}\",\n    \"lastName\": \"{{firstUserLastName}}\",\n    \"phone\": \"{{firstUserPhone}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users"
									]
								},
								"description": "If a user tries to create a user without a password, an error code of some kind should be sent in leu of a response.\n\nExpected Status: An \"error\" status code. Somewhere in the 400s or 500s.\nNo Response Body expected. If the student adds more advanced error handling though, we should not penalize them."
							},
							"response": []
						},
						{
							"name": "Create FirstUser Fail (No Username)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success (username required)', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "ea8e694e-629b-441f-991b-02f6418680e4"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n    \"password\": \"{{password}}\"\n  },\n  \"profile\": {\n  \t\"email\": \"{{firstUserEmail}}\",\n    \"firstName\": \"{{firstUserFirstName}}\",\n    \"lastName\": \"{{firstUserLastName}}\",\n    \"phone\": \"{{firstUserPhone}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users"
									]
								},
								"description": "If a user tries to create a user without a username, an error code of some kind should be sent in leu of a response.\n\nExpected Status: An \"error\" status code. Somewhere in the 400s or 500s.\nNo Response Body expected. If the student adds more advanced error handling though, we should not penalize them."
							},
							"response": []
						},
						{
							"name": "Create FirstUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('userSchema')",
											"",
											"if (pm.response.code >= 200 && pm.response.code < 300) {",
											"    pm.test('Success status', () => {",
											"        pm.response.to.be.success",
											"    })",
											"    ",
											"    pm.test('Schema is valid', () => {",
											"      pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"    })",
											"    ",
											"    pm.test('Username was set correctly', () => {",
											"        pm.expect(pm.response.json().username).to.eql(pm.environment.get('firstUser'))",
											"    })",
											"    ",
											"    pm.test('Joined date was set', () => {",
											"        const joined = pm.response.json().joined",
											"        pm.expect(joined).to.not.eql(null)",
											"        pm.expect(joined).to.not.eql(undefined)",
											"        pm.environment.set('firstUserJoined', joined)",
											"    })",
											"    ",
											"    pm.test('Profile was set correctly', () => {",
											"        const profile = pm.response.json().profile",
											"        pm.expect(profile.firstName).to.eql(pm.environment.get('firstUserFirstName'))",
											"        pm.expect(profile.lastName).to.eql(pm.environment.get('firstUserLastName'))",
											"        pm.expect(profile.email).to.eql(pm.environment.get('firstUserEmail'))",
											"        pm.expect(profile.phone).to.eql(pm.environment.get('firstUserPhone'))",
											"    })",
											"} else {",
											"    pm.test('Error status', () => {",
											"        pm.response.to.not.be.info",
											"        pm.response.to.not.be.success",
											"    })",
											"    ",
											"    pm.test('Should not be internal server error', () => {",
											"        pm.response.to.not.be.serverError",
											"    })",
											"",
											"}"
										],
										"type": "text/javascript",
										"id": "ebb9bf44-5abe-4d96-874a-de535d47e58b"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n  \t\"username\": \"{{firstUser}}\",\n    \"password\": \"{{password}}\"\n  },\n  \"profile\": {\n    \"email\": \"{{firstUserEmail}}\",\n    \"firstName\": \"{{firstUserFirstName}}\",\n    \"lastName\": \"{{firstUserLastName}}\",\n    \"phone\": \"{{firstUserPhone}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users"
									]
								},
								"description": "If a user tries to create a user without a username, an error code of some kind should be sent in leu of a response.\n\nExpected Status: An \"error\" status code. Somewhere in the 400s or 500s.\nNo Response Body expected. If the student adds more advanced error handling though, we should not penalize them."
							},
							"response": []
						},
						{
							"name": "Create FirstUser Again",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Error status', () => {",
											"    pm.response.to.not.be.info",
											"    pm.response.to.not.be.success",
											"})",
											"",
											"pm.test('Should not be internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "4d0d329c-9871-40fe-b6b7-901b748ec113"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n    \"username\": \"{{firstUser}}\",\n    \"password\": \"{{password}}\"\n  },\n  \"profile\": {\n    \"email\": \"{{firstUserEmail}}\",\n    \"firstName\": \"{{firstUserFirstName}}\",\n    \"lastName\": \"{{firstUserLastName}}\",\n    \"phone\": \"{{firstUserPhone}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users"
									]
								},
								"description": "If a user tries to create a user without a username, an error code of some kind should be sent in leu of a response.\n\nExpected Status: An \"error\" status code. Somewhere in the 400s or 500s.\nNo Response Body expected. If the student adds more advanced error handling though, we should not penalize them."
							},
							"response": []
						},
						{
							"name": "Create SecondUser Fail (No Credentials)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success (credentials required)', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "11f59406-a66f-408e-9fba-3b7ef87ecb2a"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profile\": {\n    \"email\": \"{{secondUserEmail}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users"
									]
								},
								"description": "If a user tries to create a user without any credentials, an error code of some kind should be sent in leu of a response.\n\nExpected Status: An \"error\" status code. Somewhere in the 400s or 500s.\nNo Response Body expected. If the student adds more advanced error handling though, we should not penalize them."
							},
							"response": []
						},
						{
							"name": "Create SecondUser Fail (Empty Request)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success (request is empty)', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "7eb72d4c-b78f-4956-9c5b-1de651c407fe"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "localhost:8080/users",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users"
									]
								},
								"description": "If a user tries to create a user with an empty request, an error code of some kind should be sent in leu of a response.\n\nExpected Status: An \"error\" status code. Somewhere in the 400s or 500s.\nNo Response Body expected. If the student adds more advanced error handling though, we should not penalize them."
							},
							"response": []
						},
						{
							"name": "Create SecondUser Fail (No Profile)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success (password required)', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "e6e85908-a40b-4767-beb5-5529d4e46e6e"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n    \"username\": \"{{secondUser}}\",\n    \"password\": \"{{password}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users"
									]
								},
								"description": "If a user tries to create a user with no profile at all, an error code of some kind should be sent in leu of a response.\n\nExpected Status: An \"error\" status code. Somewhere in the 400s or 500s.\nNo Response Body expected. If the student adds more advanced error handling though, we should not penalize them."
							},
							"response": []
						},
						{
							"name": "Create SecondUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e9f6882-5bf7-4cdd-aa2e-ac842350f373",
										"exec": [
											"const schema = pm.environment.get('userSchema')",
											"",
											"pm.test('Success status', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Username was set correctly', () => {",
											"    pm.expect(pm.response.json().username).to.eql(pm.environment.get('secondUser'))",
											"})",
											"",
											"pm.test('Joined date was set', () => {",
											"    const joined = pm.response.json().joined",
											"    pm.expect(joined).to.not.eql(null)",
											"    pm.expect(joined).to.not.eql(undefined)",
											"    pm.environment.set('secondUserJoined', joined)",
											"})",
											"",
											"pm.test('Profile was set correctly', () => {",
											"    const profile = pm.response.json().profile",
											"    pm.expect(profile.firstName).to.eql(pm.environment.get('secondUserFirstName'))",
											"    pm.expect(profile.lastName).to.eql(pm.environment.get('secondUserLastName'))",
											"    pm.expect(profile.email).to.eql(pm.environment.get('secondUserEmail'))",
											"    pm.expect(profile.phone).to.eql(pm.environment.get('secondUserPhone'))",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n  \t\"username\": \"{{secondUser}}\",\n  \t\"password\": \"{{password}}\"\n  },\n  \"profile\": {\n    \"firstName\": \"{{secondUserFirstName}}\",\n    \"lastName\": \"{{secondUserLastName}}\",\n    \"email\": \"{{secondUserEmail}}\",\n    \"phone\": \"{{secondUserPhone}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users"
									]
								},
								"description": "If a user tries to create a user with an empty request, an error code of some kind should be sent in leu of a response.\n\nExpected Status: An \"error\" status code. Somewhere in the 400s or 500s.\nNo Response Body expected. If the student adds more advanced error handling though, we should not penalize them."
							},
							"response": []
						},
						{
							"name": "Create SecondUser Again",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Error status', () => {",
											"    pm.response.to.not.be.info",
											"    pm.response.to.not.be.success",
											"})",
											"",
											"pm.test('Should not be internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "a5a3d8ee-6c95-4f8e-9ec5-c164810d5cfc"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n    \"username\": \"{{secondUser}}\",\n    \"password\": \"{{password}}\"\n  },\n  \"profile\": {\n    \"email\": \"{{secondUserEmail}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users"
									]
								},
								"description": "If a user tries to create a user with an empty request, an error code of some kind should be sent in leu of a response.\n\nExpected Status: An \"error\" status code. Somewhere in the 400s or 500s.\nNo Response Body expected. If the student adds more advanced error handling though, we should not penalize them."
							},
							"response": []
						}
					],
					"description": "Tests for creating new users.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update User",
					"item": [
						{
							"name": "Update NonExisting User",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status error', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "b188459e-12e1-4760-9c29-27b2f114e7de"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n    \"username\": \"doesn't matter\",\n    \"password\": \"probably shouldn't be one\"\n  },\n  \"profile\": {\n    \"email\": \"test@test.com\",\n    \"firstName\": \"filling this in for funzies\",\n    \"lastName\": \"literally doesn't matter\",\n    \"phone\": \"not going to work!\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@nonExisting",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@nonExisting"
									]
								},
								"description": "Attempts to update a user that does not exist (at least at this point in testing). Should return an error with no response body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "Update SecondUser Fail (No Username)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status error', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "aca41987-fe1f-4ade-ad23-b77d187c3c40"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n    \"password\": \"{{password}}\"\n  },\n  \"profile\": {\n    \"email\": \"{{secondUserEmail}}\",\n    \"firstName\": \"{{secondUserFirstName}}\",\n    \"lastName\": \"{{secondUserLastName}}\",\n    \"phone\": \"{{secondUserPhone}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}"
									]
								},
								"description": "Attempts to update the secondUser with no username provided. Should return an error and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "Update SecondUser Fail (No Password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status error', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "b7e7e16a-3af3-476f-b1e7-2f15cfecd0ea"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n  \t\"username\": \"{{secondUser}}\"\n  },\n  \"profile\": {\n    \"email\": \"{{secondUserEmail}}\",\n    \"firstName\": \"{{secondUserFirstName}}\",\n    \"lastName\": \"{{secondUserLastName}}\",\n    \"phone\": \"{{secondUserPhone}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}"
									]
								},
								"description": "Attempts to update the secondUser with no password provided. Should return an error and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "Update SecondUser Fail (No Credentials)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status error', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "f2fe1846-8a7b-4918-8b52-c12c14ed15b4"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profile\": {\n    \"email\": \"{{secondUserEmail}}\",\n    \"firstName\": \"{{secondUserFirstName}}\",\n    \"lastName\": \"{{secondUserLastName}}\",\n    \"phone\": \"{{secondUserPhone}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}"
									]
								},
								"description": "Updates the profile of a user with the given username. If no such user exists, the user is deleted, or the provided credentials do not match the user, an error should be sent in lieu of a response. In the case of a successful update, the returned user should contain the updated data.\n\nRequest:\n{\n  \"credentials\": {\n    \"username\": \"{username}\",\n    \"password\": \"{password}\"\n  },\n  \"profile\": {\n    \"firstName\": \"{firstName}\",\n    \"lastName\": \"{lastName}\",\n    \"email\": \"{email}\",\n    \"phone\": \"{phoneNumber}\"\n  }\n}\n\nResponse:\n{\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n        \"firstName\": \"{firstName}\",\n        \"lastName\": \"{lastName}\",\n        \"email\": \"{email}\",\n        \"phone\": \"{phoneNumber}\"\n    }\n}"
							},
							"response": []
						},
						{
							"name": "Update SecondUser Fail (No Profile)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status error', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "bd61f746-2752-4bd8-bddb-392170d4ff65"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n    \"username\": \"{{secondUser}}\",\n    \"password\": \"{{password}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}"
									]
								},
								"description": "Updates the profile of a user with the given username. If no such user exists, the user is deleted, or the provided credentials do not match the user, an error should be sent in lieu of a response. In the case of a successful update, the returned user should contain the updated data.\n\nRequest:\n{\n  \"credentials\": {\n    \"username\": \"{username}\",\n    \"password\": \"{password}\"\n  },\n  \"profile\": {\n    \"firstName\": \"{firstName}\",\n    \"lastName\": \"{lastName}\",\n    \"email\": \"{email}\",\n    \"phone\": \"{phoneNumber}\"\n  }\n}\n\nResponse:\n{\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n        \"firstName\": \"{firstName}\",\n        \"lastName\": \"{lastName}\",\n        \"email\": \"{email}\",\n        \"phone\": \"{phoneNumber}\"\n    }\n}"
							},
							"response": []
						},
						{
							"name": "Update SecondUser First Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9f304a8-2c4c-4e46-b45e-c02b5aeb4b4a",
										"exec": [
											"const schema = pm.environment.get('userSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Username matches', () => {",
											"    pm.expect(pm.response.json().username).to.eql(pm.environment.get('secondUser'))",
											"})",
											"",
											"pm.test('Joined date has not been modified', () => {",
											"    pm.expect(new Date(pm.response.json().joined)).to.eql(new Date(pm.environment.get('secondUserJoined')))",
											"})",
											"",
											"",
											"pm.test('Profile was set correctly', () => {",
											"    const profile = pm.response.json().profile",
											"    pm.expect(profile.firstName).to.eql(pm.environment.get('secondUserFirstName'))",
											"    pm.expect(profile.lastName).to.eql(pm.environment.get('secondUserLastName'))",
											"    pm.expect(profile.email).to.eql(pm.environment.get('secondUserEmail'))",
											"    pm.expect(profile.phone).to.eql(pm.environment.get('secondUserPhone'))",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n    \"username\": \"{{secondUser}}\",\n    \"password\": \"{{password}}\"\n  },\n  \"profile\": {\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}"
									]
								},
								"description": "Updates the profile of a user with the given username. If no such user exists, the user is deleted, or the provided credentials do not match the user, an error should be sent in lieu of a response. In the case of a successful update, the returned user should contain the updated data.\n\nRequest:\n{\n  \"credentials\": {\n    \"username\": \"{username}\",\n    \"password\": \"{password}\"\n  },\n  \"profile\": {\n    \"firstName\": \"{firstName}\",\n    \"lastName\": \"{lastName}\",\n    \"email\": \"{email}\",\n    \"phone\": \"{phoneNumber}\"\n  }\n}\n\nResponse:\n{\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n        \"firstName\": \"{firstName}\",\n        \"lastName\": \"{lastName}\",\n        \"email\": \"{email}\",\n        \"phone\": \"{phoneNumber}\"\n    }\n}"
							},
							"response": []
						},
						{
							"name": "Update SecondUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('userSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Username matches', () => {",
											"    pm.expect(pm.response.json().username).to.eql(pm.environment.get('secondUser'))",
											"})",
											"",
											"pm.test('Joined date has not been modified', () => {",
											"    pm.expect(new Date(pm.response.json().joined)).to.eql(new Date(pm.environment.get('secondUserJoined')))",
											"})",
											"",
											"pm.test('Profile is correct', () => {",
											"    const profile = pm.response.json().profile",
											"    pm.expect(profile.firstName).to.eql(pm.environment.get('secondUserFirstName'))",
											"    pm.expect(profile.lastName).to.eql(pm.environment.get('secondUserLastName'))",
											"    pm.expect(profile.email).to.eql(pm.environment.get('secondUserEmail'))",
											"    pm.expect(profile.phone).to.eql(pm.environment.get('secondUserPhone'))",
											"})"
										],
										"type": "text/javascript",
										"id": "fe119c45-1567-4e2e-8934-0d7d44c1a271"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n    \"username\": \"{{secondUser}}\",\n    \"password\": \"{{password}}\"\n  },\n  \"profile\": {\n    \"email\": \"{{secondUserEmail}}\",\n    \"firstName\": \"{{secondUserFirstName}}\",\n    \"lastName\": \"{{secondUserLastName}}\",\n    \"phone\": \"{{secondUserPhone}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}"
									]
								},
								"description": "Updates the profile of a user with the given username. If no such user exists, the user is deleted, or the provided credentials do not match the user, an error should be sent in lieu of a response. In the case of a successful update, the returned user should contain the updated data.\n\nRequest:\n{\n  \"credentials\": {\n    \"username\": \"{username}\",\n    \"password\": \"{password}\"\n  },\n  \"profile\": {\n    \"firstName\": \"{firstName}\",\n    \"lastName\": \"{lastName}\",\n    \"email\": \"{email}\",\n    \"phone\": \"{phoneNumber}\"\n  }\n}\n\nResponse:\n{\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n        \"firstName\": \"{firstName}\",\n        \"lastName\": \"{lastName}\",\n        \"email\": \"{email}\",\n        \"phone\": \"{phoneNumber}\"\n    }\n}"
							},
							"response": []
						},
						{
							"name": "Update SecondUser Second Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('userSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Username matches', () => {",
											"    pm.expect(pm.response.json().username).to.eql(pm.environment.get('secondUser'))",
											"})",
											"",
											"pm.test('Joined date has not been modified', () => {",
											"    pm.expect(new Date(pm.response.json().joined)).to.eql(new Date(pm.environment.get('secondUserJoined')))",
											"})",
											"",
											"",
											"pm.test('Profile was set correctly', () => {",
											"    const profile = pm.response.json().profile",
											"    pm.expect(profile.firstName).to.eql(pm.environment.get('secondUserFirstName'))",
											"    pm.expect(profile.lastName).to.eql(pm.environment.get('secondUserLastName'))",
											"    pm.expect(profile.email).to.eql(pm.environment.get('secondUserEmail'))",
											"    pm.expect(profile.phone).to.eql(pm.environment.get('secondUserPhone'))",
											"})"
										],
										"type": "text/javascript",
										"id": "67fcd825-0b17-445b-9d8e-9ccece8e3aab"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n    \"username\": \"{{secondUser}}\",\n    \"password\": \"{{password}}\"\n  },\n  \"profile\": {\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}"
									]
								},
								"description": "Updates the profile of a user with the given username. If no such user exists, the user is deleted, or the provided credentials do not match the user, an error should be sent in lieu of a response. In the case of a successful update, the returned user should contain the updated data.\n\nRequest:\n{\n  \"credentials\": {\n    \"username\": \"{username}\",\n    \"password\": \"{password}\"\n  },\n  \"profile\": {\n    \"firstName\": \"{firstName}\",\n    \"lastName\": \"{lastName}\",\n    \"email\": \"{email}\",\n    \"phone\": \"{phoneNumber}\"\n  }\n}\n\nResponse:\n{\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n        \"firstName\": \"{firstName}\",\n        \"lastName\": \"{lastName}\",\n        \"email\": \"{email}\",\n        \"phone\": \"{phoneNumber}\"\n    }\n}"
							},
							"response": []
						}
					],
					"description": "Tests for updating a user's information.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Existing Users",
					"item": [
						{
							"name": "Get All Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const userSchema = pm.environment.get('userSchema')",
											"",
											"const schema = {",
											"    'type': 'array',",
											"    'description': 'An array of user dto\\'s',",
											"    'items': { $ref: userSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Returns an array with two users', () => {",
											"    pm.expect(pm.response.json().length).to.eql(2)",
											"})",
											"",
											"if (pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const users = pm.response.json().map(user => user.username)",
											"    ",
											"    pm.test('Contains the firstUser', () => {",
											"        pm.expect(users).to.include(pm.environment.get('firstUser'))",
											"    })",
											"    ",
											"    pm.test('Contains the secondUser', () => {",
											"        pm.expect(users).to.include(pm.environment.get('secondUser'))",
											"    })",
											"}",
											"",
											""
										],
										"type": "text/javascript",
										"id": "ce22890b-e9c6-4be5-a538-344d53dbb2d5"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users"
									]
								},
								"description": "Initially no users have been created so this method should return an empty array.\n\nStatus Expected: success\nExpected Response: [ ] (an empty array)"
							},
							"response": []
						},
						{
							"name": "Get FirstUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('userSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Username is correct', () => {",
											"    pm.expect(pm.response.json().username).to.eql(pm.environment.get('firstUser'))",
											"})",
											"",
											"pm.test('Joined has not been modified', () => {",
											"    pm.expect(new Date(pm.response.json().joined)).to.eql(new Date(pm.environment.get('firstUserJoined')))",
											"})",
											"",
											"pm.test('Profile is correct', () => {",
											"    const profile = pm.response.json().profile",
											"    pm.expect(profile.firstName).to.eql(pm.environment.get('firstUserFirstName'))",
											"    pm.expect(profile.lastName).to.eql(pm.environment.get('firstUserLastName'))",
											"    pm.expect(profile.email).to.eql(pm.environment.get('firstUserEmail'))",
											"    pm.expect(profile.phone).to.eql(pm.environment.get('firstUserPhone'))",
											"})"
										],
										"type": "text/javascript",
										"id": "d043f9a9-eae4-480e-a320-d8ab9350cdd8"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}"
									]
								},
								"description": "Initially no users have been created so this method should return an empty array.\n\nStatus Expected: success\nExpected Response: [ ] (an empty array)"
							},
							"response": []
						},
						{
							"name": "Get SecondUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('userSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Username is correct', () => {",
											"    pm.expect(pm.response.json().username).to.eql(pm.environment.get('secondUser'))",
											"})",
											"",
											"pm.test('Joined has not been modified', () => {",
											"    pm.expect(new Date(pm.response.json().joined)).to.eql(new Date(pm.environment.get('secondUserJoined')))",
											"})",
											"",
											"pm.test('Profile is correct', () => {",
											"    const profile = pm.response.json().profile",
											"    pm.expect(profile.firstName).to.eql(pm.environment.get('secondUserFirstName'))",
											"    pm.expect(profile.lastName).to.eql(pm.environment.get('secondUserLastName'))",
											"    pm.expect(profile.email).to.eql(pm.environment.get('secondUserEmail'))",
											"    pm.expect(profile.phone).to.eql(pm.environment.get('secondUserPhone'))",
											"})"
										],
										"type": "text/javascript",
										"id": "8ab87ebe-ba9c-4f31-8fdc-5759f97f056b"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}"
									]
								},
								"description": "Initially no users have been created so this method should return an empty array.\n\nStatus Expected: success\nExpected Response: [ ] (an empty array)"
							},
							"response": []
						}
					],
					"description": "Tests for retrieving users from the database.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Follow and Unfollow",
					"item": [
						{
							"name": "Get Random Followers",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Status should not be internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "274f78c5-0877-496d-add3-be9120ad903e"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@random/followers",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@random",
										"followers"
									]
								},
								"description": "Retrieves the followers of the user with the given username. Only active users should be included in the response. If no active user with the given username exists, an error should be sent in lieu of a response.\n\n#### Response\n```\n[ // Array of Users\n\t{\n\t\t\"username\": \"string\",\n\t\t\"profile\": {\n\t\t\t\"firstName\"?: \"string\",\n\t\t\t\"lastName\"?: \"string\",\n\t\t\t\"email\": \"string\",\n\t\t\t\"phone\"?: \"string\"\n\t\t},\n\t\t\"joined\": timestamp\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "Get Random Following",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Status should not be internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "e96d4f37-01cd-4719-baf3-24257a080bfb"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@random/following",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@random",
										"following"
									]
								},
								"description": "Retrieves the followers of the user with the given username. Only active users should be included in the response. If no active user with the given username exists, an error should be sent in lieu of a response.\n\n#### Response\n```\n[ // Array of Users\n\t{\n\t\t\"username\": \"string\",\n\t\t\"profile\": {\n\t\t\t\"firstName\"?: \"string\",\n\t\t\t\"lastName\"?: \"string\",\n\t\t\t\"email\": \"string\",\n\t\t\t\"phone\"?: \"string\"\n\t\t},\n\t\t\"joined\": timestamp\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "FirstUser Follow SecondUser Fail (No Credentials)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "5fa93bcf-6fff-423d-9c26-db48b2f3abbb"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}/follow",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}",
										"follow"
									]
								},
								"description": "Attempts to follow the secondUser without providing the credentials of the firstUser. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "FirstUser Follow SecondUser Fail (No Password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "bb86118c-3eb1-4014-b26f-0149e72e07cc"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{firstUser}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}/follow",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}",
										"follow"
									]
								},
								"description": "Attempts to follow the secondUser without providing the password of the firstUser. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "FirstUser Follow SecondUser Fail (No Username)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "46bb026f-17b9-4961-934a-82f6551fa798"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}/follow",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}",
										"follow"
									]
								},
								"description": "Attempts to follow the secondUser without providing the username of the firstUser. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "FirstUser Follow SecondUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Should be success', () => {",
											"    pm.response.to.be.success",
											"})",
											""
										],
										"id": "a22f108b-7262-4461-a3ff-5f43faccaefe"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{firstUser}}\",\n  \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}/follow",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}",
										"follow"
									]
								},
								"description": "Attempts to follow the secondUser without providing the username of the firstUser. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "FirstUser Follow SecondUser Again",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status error', () => {",
											"    pm.response.to.not.be.success",
											"})",
											"",
											"pm.test('Should not be internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "87441b54-6596-4684-8dce-1d670306f755"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n\t  \"username\": \"{{firstUser}}\",\n\t  \"password\": \"{{password}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}/follow",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}",
										"follow"
									]
								},
								"description": "Attempts to follow the secondUser without providing the username of the firstUser. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "Get SecondUser Followers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const userSchema = pm.environment.get('userSchema')",
											"",
											"const schema = {",
											"    'type': 'array',",
											"    'description': 'An array of user dto\\'s',",
											"    'items': { $ref: userSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Array contains only 1 user', () => {",
											"    pm.expect(pm.response.json().length).to.eql(1)",
											"})",
											"",
											"if (pm.response.code === 200 && pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const users = pm.response.json().map(user => user.username)",
											"    ",
											"    pm.test('Contains the firstUser', () => {",
											"        pm.expect(users).to.include(pm.environment.get('firstUser'))",
											"    })",
											"}"
										],
										"type": "text/javascript",
										"id": "d42af2ca-0faa-4983-8c72-bb9cdf610ce1"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}/followers",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}",
										"followers"
									]
								},
								"description": "Retrieves the followers of the user with the given username. Only active users should be included in the response. If no active user with the given username exists, an error should be sent in lieu of a response.\n\n#### Response\n```\n[ // Array of Users\n\t{\n\t\t\"username\": \"string\",\n\t\t\"profile\": {\n\t\t\t\"firstName\"?: \"string\",\n\t\t\t\"lastName\"?: \"string\",\n\t\t\t\"email\": \"string\",\n\t\t\t\"phone\"?: \"string\"\n\t\t},\n\t\t\"joined\": timestamp\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "Get FirstUser Following",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const userSchema = pm.environment.get('userSchema')",
											"",
											"const schema = {",
											"    'type': 'array',",
											"    'description': 'An array of user dto\\'s',",
											"    'items': { $ref: userSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Array contains only 1 user', () => {",
											"    pm.expect(pm.response.json().length).to.eql(1)",
											"})",
											"",
											"if (pm.response.code === 200 && pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const users = pm.response.json().map(user => user.username)",
											"    ",
											"    pm.test('Contains the secondUser', () => {",
											"        pm.expect(users).to.include(pm.environment.get('secondUser'))",
											"    })",
											"}"
										],
										"type": "text/javascript",
										"id": "6a3b536e-9a57-411a-9b53-c3d7838e27f3"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}/following",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}",
										"following"
									]
								},
								"description": "Retrieves the followers of the user with the given username. Only active users should be included in the response. If no active user with the given username exists, an error should be sent in lieu of a response.\n\n#### Response\n```\n[ // Array of Users\n\t{\n\t\t\"username\": \"string\",\n\t\t\"profile\": {\n\t\t\t\"firstName\"?: \"string\",\n\t\t\t\"lastName\"?: \"string\",\n\t\t\t\"email\": \"string\",\n\t\t\t\"phone\"?: \"string\"\n\t\t},\n\t\t\"joined\": timestamp\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "SecondUser Follow FirstUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Should be success', () => {",
											"    pm.response.to.be.success",
											"})"
										],
										"id": "74979535-316e-4695-a8d8-9b9e618a25b1"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{secondUser}}\",\n  \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}/follow",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}",
										"follow"
									]
								},
								"description": "Attempts to follow the secondUser without providing the username of the firstUser. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "SecondUser Follow FirstUser Again",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status error', () => {",
											"    pm.response.to.not.be.success",
											"})",
											"",
											"pm.test('Should not be internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "0e7d4cc1-4e92-4f76-9a70-390cdb99f592"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n\t  \"username\": \"{{secondUser}}\",\n\t  \"password\": \"{{password}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}/follow",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}",
										"follow"
									]
								},
								"description": "Attempts to follow the secondUser without providing the username of the firstUser. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "Get FirstUser Followers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const userSchema = pm.environment.get('userSchema')",
											"",
											"const schema = {",
											"    'type': 'array',",
											"    'description': 'An array of user dto\\'s',",
											"    'items': { $ref: userSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Array contains only 1 user', () => {",
											"    pm.expect(pm.response.json().length).to.eql(1)",
											"})",
											"",
											"if (pm.response.code === 200 && pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const users = pm.response.json().map(user => user.username)",
											"    ",
											"    pm.test('Contains the secondUser', () => {",
											"        pm.expect(users).to.include(pm.environment.get('secondUser'))",
											"    })",
											"}"
										],
										"type": "text/javascript",
										"id": "0b76e4d3-69ea-4190-b312-f67b89c7d003"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}/followers",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}",
										"followers"
									]
								},
								"description": "Retrieves the followers of the user with the given username. Only active users should be included in the response. If no active user with the given username exists, an error should be sent in lieu of a response.\n\n#### Response\n```\n[ // Array of Users\n\t{\n\t\t\"username\": \"string\",\n\t\t\"profile\": {\n\t\t\t\"firstName\"?: \"string\",\n\t\t\t\"lastName\"?: \"string\",\n\t\t\t\"email\": \"string\",\n\t\t\t\"phone\"?: \"string\"\n\t\t},\n\t\t\"joined\": timestamp\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "Get SecondUser Following",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const userSchema = pm.environment.get('userSchema')",
											"",
											"const schema = {",
											"    'type': 'array',",
											"    'description': 'An array of user dto\\'s',",
											"    'items': { $ref: userSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Array contains only 1 user', () => {",
											"    pm.expect(pm.response.json().length).to.eql(1)",
											"})",
											"",
											"pm.test('Contains the firstUser', () => {",
											"    const users = pm.response.json().map(user => user.username)",
											"    pm.expect(users).to.include(pm.environment.get('firstUser'))",
											"})"
										],
										"type": "text/javascript",
										"id": "4f80df6d-3ad6-4d0a-8534-2e6383908cef"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}/following",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}",
										"following"
									]
								},
								"description": "Retrieves the followers of the user with the given username. Only active users should be included in the response. If no active user with the given username exists, an error should be sent in lieu of a response.\n\n#### Response\n```\n[ // Array of Users\n\t{\n\t\t\"username\": \"string\",\n\t\t\"profile\": {\n\t\t\t\"firstName\"?: \"string\",\n\t\t\t\"lastName\"?: \"string\",\n\t\t\t\"email\": \"string\",\n\t\t\t\"phone\"?: \"string\"\n\t\t},\n\t\t\"joined\": timestamp\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "SecondUser Unfollow DoesNotExist",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "78a8cdee-dc85-4af5-a01b-4b4ebc1096b3"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{secondUser}}\",\n  \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@doesNotExist/unfollow",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@doesNotExist",
										"unfollow"
									]
								},
								"description": "Attempts to unfollow a non-existent user. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "SecondUser Unfollow FirstUser Fail (No Credentials)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "9b65fd81-b6f8-40bd-847e-0342f9c4e0fe"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}/unfollow",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}",
										"unfollow"
									]
								},
								"description": "Attempts to unfollow the firstUser without providing the credentials of the secondUser. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "SecondUser Unfollow FirstUser Fail (No Password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "897104ce-4041-42fc-8bfd-e06343bdc0de"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{secondUser}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}/unfollow",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}",
										"unfollow"
									]
								},
								"description": "Attempts to unfollow the firstUser without providing the password of the secondUser. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "SecondUser Unfollow FirstUser Fail (No Username)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status client error', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "e418418d-6082-47d6-92f0-e33a94a1ce29"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}/unfollow",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}",
										"unfollow"
									]
								},
								"description": "Attempts to unfollow the firstUser without providing the username of the secondUser. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "SecondUser Unfollow FirstUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Should be success', () => {",
											"    pm.response.to.be.success",
											"})"
										],
										"type": "text/javascript",
										"id": "fd0e0bd4-9646-4903-84d5-ea6f27e9bba8"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \t\"username\": \"{{secondUser}}\",\n  \t\"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}/unfollow",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}",
										"unfollow"
									]
								},
								"description": "Attempts to unfollow the firstUser without providing the username of the secondUser. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "SecondUser Unfollow FirstUser Again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status client error', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"type": "text/javascript",
										"id": "b912f20d-f074-4c7f-8231-0eb2fbea2e77"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \t\"username\": \"{{secondUser}}\",\n  \t\"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}/unfollow",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}",
										"unfollow"
									]
								},
								"description": "Attempts to unfollow the firstUser without providing the username of the secondUser. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "Get FirstUser Followers Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const userSchema = pm.environment.get('userSchema')",
											"",
											"const schema = {",
											"    'type': 'array',",
											"    'description': 'An array of user dto\\'s',",
											"    'items': { $ref: userSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Array to be empty', () => {",
											"    pm.expect(pm.response.json().length).to.eql(0)",
											"})"
										],
										"type": "text/javascript",
										"id": "53649cd8-1fcb-4950-9599-1b8522ff37e2"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}/followers",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}",
										"followers"
									]
								},
								"description": "Retrieves the followers of the user with the given username. Only active users should be included in the response. If no active user with the given username exists, an error should be sent in lieu of a response.\n\n#### Response\n```\n[ // Array of Users\n\t{\n\t\t\"username\": \"string\",\n\t\t\"profile\": {\n\t\t\t\"firstName\"?: \"string\",\n\t\t\t\"lastName\"?: \"string\",\n\t\t\t\"email\": \"string\",\n\t\t\t\"phone\"?: \"string\"\n\t\t},\n\t\t\"joined\": timestamp\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "Get SecondUser Following Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const userSchema = pm.environment.get('userSchema')",
											"",
											"const schema = {",
											"    'type': 'array',",
											"    'description': 'An array of user dto\\'s',",
											"    'items': { $ref: userSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Array to be empty', () => {",
											"    pm.expect(pm.response.json().length).to.eql(0)",
											"})"
										],
										"type": "text/javascript",
										"id": "92464142-b7b4-4e54-9c62-38114e39264c"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}/following",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}",
										"following"
									]
								},
								"description": "Retrieves the followers of the user with the given username. Only active users should be included in the response. If no active user with the given username exists, an error should be sent in lieu of a response.\n\n#### Response\n```\n[ // Array of Users\n\t{\n\t\t\"username\": \"string\",\n\t\t\"profile\": {\n\t\t\t\"firstName\"?: \"string\",\n\t\t\t\"lastName\"?: \"string\",\n\t\t\t\"email\": \"string\",\n\t\t\t\"phone\"?: \"string\"\n\t\t},\n\t\t\"joined\": timestamp\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "SecondUser Follow FirstUser After Unfollow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Should be success', () => {",
											"    pm.response.to.be.success",
											"})"
										],
										"type": "text/javascript",
										"id": "602b1e7d-db01-4a36-848f-46b494022044"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{secondUser}}\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}/follow",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}",
										"follow"
									]
								},
								"description": "Attempts to follow the secondUser without providing the username of the firstUser. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "SecondUser Follow FirstUser Again After Unfollow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status error', () => {",
											"    pm.response.to.not.be.success",
											"})",
											"",
											"pm.test('Should not be internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"type": "text/javascript",
										"id": "2849b479-dcfa-45eb-933d-afdd2c1fb04e"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{secondUser}}\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}/follow",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}",
										"follow"
									]
								},
								"description": "Attempts to follow the secondUser without providing the username of the firstUser. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						}
					],
					"description": "Tests for following and unfollowing users",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "User Feed, Tweets, & Mentions",
					"item": [
						{
							"name": "Get RandomUser Feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status error', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "0d590811-f556-42a8-be23-200480cacad4"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@randomUser/feed",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@randomUser",
										"feed"
									]
								},
								"description": "Retrieves all (non-deleted) tweets authored by the user with the given username, as well as all (non-deleted) tweets authored by users the given user is following. This includes simple tweets, reposts, and replies. The tweets should appear in reverse-chronological order. If no active user with that username exists (deleted or never created), an error should be sent in lieu of a response.\n\n#### Response\n```\n[ // Array of Tweets\n\t{\n\t\t\"id\": integer,\n\t\t\"author\": {\n\t\t\t\"username\": \"string\",\n\t\t\t\"profile\": {\n\t\t\t\t\"firstName\"?: \"string\",\n\t\t\t\t\"lastName\"?: \"string\",\n\t\t\t\t\"email\": \"string\",\n\t\t\t\t\"phone\"?: \"string\"\n\t\t\t},\n\t\t\t\"joined\": timestamp\n\t\t},\n\t\t\"posted\": timestamp,\n\t\t\"content\"?: \"string\",\n\t\t\"inReplyTo\"?: {Tweet},\n\t\t\"repostOf\"?: {Tweet}\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "Get RandomUser Tweets",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status error', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "cf9128a0-3fc1-42b0-a17e-1b25d983325c"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@randomUser/tweets",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@randomUser",
										"tweets"
									]
								},
								"description": "Retrieves all (non-deleted) tweets authored by the user with the given username. This includes simple tweets, reposts, and replies. The tweets should appear in reverse-chronological order. If no active user with that username exists (deleted or never created), an error should be sent in lieu of a response.\n\n#### Response\n```\n[ // Array of Tweets\n\t{\n\t\t\"id\": integer,\n\t\t\"author\": {\n\t\t\t\"username\": \"string\",\n\t\t\t\"profile\": {\n\t\t\t\t\"firstName\"?: \"string\",\n\t\t\t\t\"lastName\"?: \"string\",\n\t\t\t\t\"email\": \"string\",\n\t\t\t\t\"phone\"?: \"string\"\n\t\t\t},\n\t\t\t\"joined\": timestamp\n\t\t},\n\t\t\"posted\": timestamp,\n\t\t\"content\"?: \"string\",\n\t\t\"inReplyTo\"?: {Tweet},\n\t\t\"repostOf\"?: {Tweet}\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "Get RandomUser Mentions",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status error', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "bea3cf51-25f6-447c-8470-ee1e4f764920"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@randomUser/mentions",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@randomUser",
										"mentions"
									]
								},
								"description": "Retrieves all (non-deleted) tweets in which the user with the given username is mentioned. The tweets should appear in reverse-chronological order. If no active user with that username exists, an error should be sent in lieu of a response.\n\nA user is considered \"mentioned\" by a tweet if the tweet has content and the user's username appears in that content following a ```@```.\n\n#### Response\n```\n[ // Array of Tweets\n\t{\n\t\t\"id\": integer,\n\t\t\"author\": {\n\t\t\t\"username\": \"string\",\n\t\t\t\"profile\": {\n\t\t\t\t\"firstName\"?: \"string\",\n\t\t\t\t\"lastName\"?: \"string\",\n\t\t\t\t\"email\": \"string\",\n\t\t\t\t\"phone\"?: \"string\"\n\t\t\t},\n\t\t\t\"joined\": timestamp\n\t\t},\n\t\t\"posted\": timestamp,\n\t\t\"content\"?: \"string\",\n\t\t\"inReplyTo\"?: {Tweet},\n\t\t\"repostOf\"?: {Tweet}\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "Get SecondUser Feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60fbf05e-d30f-431d-9585-ae331df468f6",
										"exec": [
											"const tweetSchema = pm.environment.get('tweetSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of tweet dto\\'s',",
											"    items: { $ref: tweetSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}/feed",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}",
										"feed"
									]
								},
								"description": "Retrieves all (non-deleted) tweets authored by the user with the given username, as well as all (non-deleted) tweets authored by users the given user is following. This includes simple tweets, reposts, and replies. The tweets should appear in reverse-chronological order. If no active user with that username exists (deleted or never created), an error should be sent in lieu of a response.\n\n#### Response\n```\n[ // Array of Tweets\n\t{\n\t\t\"id\": integer,\n\t\t\"author\": {\n\t\t\t\"username\": \"string\",\n\t\t\t\"profile\": {\n\t\t\t\t\"firstName\"?: \"string\",\n\t\t\t\t\"lastName\"?: \"string\",\n\t\t\t\t\"email\": \"string\",\n\t\t\t\t\"phone\"?: \"string\"\n\t\t\t},\n\t\t\t\"joined\": timestamp\n\t\t},\n\t\t\"posted\": timestamp,\n\t\t\"content\"?: \"string\",\n\t\t\"inReplyTo\"?: {Tweet},\n\t\t\"repostOf\"?: {Tweet}\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "Get SecondUser Tweets Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const tweetSchema = pm.environment.get('tweetSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of tweet dto\\'s',",
											"    items: { $ref: tweetSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"if (pm.response.code >= 200 && pm.response.code < 300 && pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    pm.test('Should be empty', () => {",
											"        pm.expect(pm.response.json().length).to.eql(0)",
											"    })",
											"}"
										],
										"type": "text/javascript",
										"id": "9fa48ff5-3426-4cbd-a364-2d337022e518"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}/tweets",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}",
										"tweets"
									]
								},
								"description": "Retrieves all (non-deleted) tweets authored by the user with the given username. This includes simple tweets, reposts, and replies. The tweets should appear in reverse-chronological order. If no active user with that username exists (deleted or never created), an error should be sent in lieu of a response.\n\n#### Response\n```\n[ // Array of Tweets\n\t{\n\t\t\"id\": integer,\n\t\t\"author\": {\n\t\t\t\"username\": \"string\",\n\t\t\t\"profile\": {\n\t\t\t\t\"firstName\"?: \"string\",\n\t\t\t\t\"lastName\"?: \"string\",\n\t\t\t\t\"email\": \"string\",\n\t\t\t\t\"phone\"?: \"string\"\n\t\t\t},\n\t\t\t\"joined\": timestamp\n\t\t},\n\t\t\"posted\": timestamp,\n\t\t\"content\"?: \"string\",\n\t\t\"inReplyTo\"?: {Tweet},\n\t\t\"repostOf\"?: {Tweet}\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						}
					],
					"description": "Tests for individual user's feeds, tweets, & mentions.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete User",
					"item": [
						{
							"name": "Delete RandomUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "e238c1c3-47dc-4f18-a4f0-64eed0b2cfb8"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n    \"username\": \"{{firstUser}}\",\n    \"password\": \"{{password}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@randomUser",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@randomUser"
									]
								},
								"description": "\"Deletes\" a user with the given username. If no such user exists or the provided credentials do not match the user, an error should be sent in lieu of a response. If a user is successfully \"deleted\", the response should contain the user data prior to deletion.\n\n**IMPORTANT**: This action should not actually drop any records from the database! Instead, develop a way to keep track of \"deleted\" users so that if a user is re-activated, all of their tweets and information are restored.\n\n#### Request\n```\n{\n\t\"credentials\": {\n\t\t\"username\": \"string\",\n\t\t\"password\": \"string\"\n\t}\n}\n```\n\n#### Response\n```\n{ // User\n\t\"username\": \"string\",\n\t\"profile\": {\n\t\t\"firstName\"?: \"string\",\n\t\t\"lastName\"?: \"string\",\n\t\t\"email\": \"string\",\n\t\t\"phone\"?: \"string\"\n\t},\n\t\"joined\": timestamp\n}\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "Delete FirstUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('userSchema')",
											"",
											"",
											"pm.test('Success status', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Username is correct', () => {",
											"    pm.expect(pm.response.json().username).to.eql(pm.environment.get('firstUser'))",
											"})",
											"",
											"pm.test('Joined has not been modified', () => {",
											"    pm.expect(new Date(pm.response.json().joined)).to.eql(new Date(pm.environment.get('firstUserJoined')))",
											"})",
											"",
											"pm.test('Profile is correct', () => {",
											"    const profile = pm.response.json().profile",
											"    pm.expect(profile.firstName).to.eql(pm.environment.get('firstUserFirstName'))",
											"    pm.expect(profile.lastName).to.eql(pm.environment.get('firstUserLastName'))",
											"    pm.expect(profile.email).to.eql(pm.environment.get('firstUserEmail'))",
											"    pm.expect(profile.phone).to.eql(pm.environment.get('firstUserPhone'))",
											"})"
										],
										"type": "text/javascript",
										"id": "a0f4bcbc-6ada-4bd9-a77f-52cd08cf973a"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{firstUser}}\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}"
									]
								},
								"description": "\"Deletes\" a user with the given username. If no such user exists or the provided credentials do not match the user, an error should be sent in lieu of a response. If a user is successfully \"deleted\", the response should contain the user data prior to deletion.\n\n**IMPORTANT**: This action should not actually drop any records from the database! Instead, develop a way to keep track of \"deleted\" users so that if a user is re-activated, all of their tweets and information are restored.\n\n#### Request\n```\n{\n\t\"credentials\": {\n\t\t\"username\": \"string\",\n\t\t\"password\": \"string\"\n\t}\n}\n```\n\n#### Response\n```\n{ // User\n\t\"username\": \"string\",\n\t\"profile\": {\n\t\t\"firstName\"?: \"string\",\n\t\t\"lastName\"?: \"string\",\n\t\t\"email\": \"string\",\n\t\t\"phone\"?: \"string\"\n\t},\n\t\"joined\": timestamp\n}\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "Create FirstUser After Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('userSchema')",
											"",
											"pm.test('Success status', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Username was set correctly', () => {",
											"    pm.expect(pm.response.json().username).to.eql(pm.environment.get('firstUser'))",
											"})",
											"",
											"pm.test('Joined date was set', () => {",
											"    const joined = pm.response.json().joined",
											"    pm.expect(joined).to.not.eql(null)",
											"    pm.expect(joined).to.not.eql(undefined)",
											"    pm.environment.set('firstUserJoined', new Date(joined))",
											"})",
											"",
											"pm.test('Profile was set correctly', () => {",
											"    const profile = pm.response.json().profile",
											"    pm.expect(profile.firstName).to.eql(pm.environment.get('firstUserFirstName'))",
											"    pm.expect(profile.lastName).to.eql(pm.environment.get('firstUserLastName'))",
											"    pm.expect(profile.email).to.eql(pm.environment.get('firstUserEmail'))",
											"    pm.expect(profile.phone).to.eql(pm.environment.get('firstUserPhone'))",
											"})"
										],
										"type": "text/javascript",
										"id": "41eefb60-4c22-4216-b5ed-23b4372c22b0"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n  \t\"username\": \"{{firstUser}}\",\n    \"password\": \"{{password}}\"\n  },\n  \"profile\": {\n    \"email\": \"{{firstUserEmail}}\",\n    \"firstName\": \"{{firstUserFirstName}}\",\n    \"lastName\": \"{{firstUserLastName}}\",\n    \"phone\": \"{{firstUserPhone}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users"
									]
								},
								"description": "If a user tries to create a user without a username, an error code of some kind should be sent in leu of a response.\n\nExpected Status: An \"error\" status code. Somewhere in the 400s or 500s.\nNo Response Body expected. If the student adds more advanced error handling though, we should not penalize them."
							},
							"response": []
						},
						{
							"name": "Create FirstUser After Delete Again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Error status', () => {",
											"    pm.response.to.not.be.info",
											"    pm.response.to.not.be.success",
											"})",
											"",
											"pm.test('Should not be internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})",
											""
										],
										"type": "text/javascript",
										"id": "7c4eec8d-75f6-437b-98ef-68ecffb51aa1"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n  \t\"username\": \"{{firstUser}}\",\n    \"password\": \"{{password}}\"\n  },\n  \"profile\": {\n    \"email\": \"{{firstUserEmail}}\",\n    \"firstName\": \"{{firstUserFirstName}}\",\n    \"lastName\": \"{{firstUserLastName}}\",\n    \"phone\": \"{{firstUserPhone}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/users",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users"
									]
								},
								"description": "If a user tries to create a user without a username, an error code of some kind should be sent in leu of a response.\n\nExpected Status: An \"error\" status code. Somewhere in the 400s or 500s.\nNo Response Body expected. If the student adds more advanced error handling though, we should not penalize them."
							},
							"response": []
						}
					],
					"description": "Tests for deleting users.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tweet",
			"item": [
				{
					"name": "Create New Tweets",
					"item": [
						{
							"name": "Get All Tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e8801cd-b8fd-4c7a-a694-2a0f9bb7842d",
										"exec": [
											"const hashtagSchema = pm.environment.get('hashtagSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of user dto\\'s',",
											"    items: { $ref: hashtagSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tags",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tags"
									]
								},
								"description": "Retrieves all hashtags tracked by the database.\n\nResponse:\n[\n  {\n    \"firstUsed\": {firstUsedDate},\n    \"label\": \"{label}\",\n    \"lastUsed\": {lastUsedDate}\n  }\n]"
							},
							"response": []
						},
						{
							"name": "FirstUser Post Tweet Fail (No Content)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success', () => {",
											"    pm.response.to.not.be.success",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "0a7192c6-645f-4b97-8b40-878f1eeaafe4"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentials\": {\n    \"username\": \"{{firstUser}}\",\n    \"password\": \"{{password}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/tweets",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets"
									]
								},
								"description": "Attempts to create a tweet with no content. Should return an error status with no content.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "FirstUser Post Tweet Fail (No Credentials)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success', () => {",
											"    pm.response.to.not.be.success",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "c95e88cb-d88b-4c0b-8973-eb63b3fce2c5"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"content\": \"{{firstUserTweet}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/tweets",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets"
									]
								},
								"description": "Attempts to create a tweet with no credentials. Should return an error status with no content.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "FirstUser Post Tweet Fail (No Password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success', () => {",
											"    pm.response.to.not.be.success",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "a5bd5240-3693-4759-a561-2b4cc77d8f1b"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"content\": \"{{firstUserTweet}}\",\n  \"credentials\": {\n    \"username\": \"{{firstUser}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/tweets",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets"
									]
								},
								"description": "Attempts to create a tweet with no password in the credentials. Should return an error status with no content.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "FirstUser Post Tweet Fail (No Username)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success', () => {",
											"    pm.response.to.not.be.success",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "46c7c616-053c-41f9-b442-2345b456f712"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"content\": \"{{firstUserTweet}}\",\n  \"credentials\": {\n    \"password\": \"{{password}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/tweets",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets"
									]
								},
								"description": "Attempts to create a tweet with no username in the credentials. Should return an error status with no content.\n\nExpected Status: error\nExpected Body: none"
							},
							"response": []
						},
						{
							"name": "FirstUser Post Tweet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('tweetSchema')",
											"",
											"pm.test('Schema is valid', () => {",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Tweet has id', () => {",
											"    pm.expect(pm.response.json().id).to.not.eql(null)",
											"    pm.environment.set('firstTweetId', pm.response.json().id)",
											"})",
											"",
											"pm.test('Author is correct', () => {",
											"    const author = pm.response.json().author",
											"    pm.expect(author.username).to.eql(pm.environment.get('firstUser'))",
											"    pm.expect(new Date(author.joined)).to.eql(new Date(pm.environment.get('firstUserJoined')))",
											"    const profile = author.profile",
											"    pm.expect(profile.firstName).to.eql(pm.environment.get('firstUserFirstName'))",
											"    pm.expect(profile.lastName).to.eql(pm.environment.get('firstUserLastName'))",
											"    pm.expect(profile.email).to.eql(pm.environment.get('firstUserEmail'))",
											"    pm.expect(profile.phone).to.eql(pm.environment.get('firstUserPhone'))",
											"})",
											"",
											"pm.test('Tweet has date posted', () => {",
											"    pm.expect(pm.response.json().posted).to.not.eql(null)",
											"})",
											"",
											"pm.test('Tweet content is correct', () => {",
											"    pm.expect(pm.response.json().content).to.eql(`Tweet from the first user! @${pm.environment.get('secondUser')} #${pm.environment.get('firstTag')}`)",
											"})"
										],
										"type": "text/javascript",
										"id": "3eb4642a-cce5-479b-b764-005b92e150eb"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"content\": \"{{firstUserTweet}}\",\n  \"credentials\": {\n    \"username\": \"{{firstUser}}\",\n    \"password\": \"{{password}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/tweets",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets"
									]
								},
								"description": "Creates a new simple tweet, with the author set to the user indentified by the credentials in the request body. If the given credentials do not match an active user in the database, an error should be sent in lieu of a resopnse.\n\nThe response should contain the newly-created tweet.\n\nBecause this always creates a simple tweet, it must have a content property and may not have inReplyTo or repostOf properties.\n\nIMPORTANT: when a tweet with content is created, the server must process the tweet's content for @{username} mentions and #{hashtag} tags. There is no way to create hashtags or create mentions from the API, so this must be handled automatically!\n\nRequest:\n{\n  \"content\": \"{content}\",\n  \"credentials\": {\n    \"username\": \"{username}\"\n    \"password\": \"{password}\"\n  }\n}\n\nResponse:\n{\n  \"id\": {id},\n  \"content\": \"{content}\",\n  \"posted\": {postedDate}\n  \"author\": {\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n      \"email\": \"{email}\",\n      \"firstName\": \"{firstname}\",\n      \"lastName\": \"{lastname}\",\n      \"phone\": \"{phoneNumber}\"\n    }\n  }\n}"
							},
							"response": []
						},
						{
							"name": "Get FirstUser Feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b723137a-92e7-44bb-8c44-b86879f049d9",
										"exec": [
											"const tweetSchema = pm.environment.get('tweetSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of tweet dto\\'s',",
											"    items: { $ref: tweetSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"if (pm.response.code >= 200 && pm.response.code < 300 && pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const content = pm.response.json().map(tweet => tweet.content)",
											"    const authors = pm.response.json().map(tweet => tweet.author.username)",
											"    ",
											"    pm.test('Contains the firstUser\\'s tweet', () => {",
											"        pm.expect(content).to.include(`Tweet from the first user! @${pm.environment.get('secondUser')} #${pm.environment.get('firstTag')}`)",
											"        pm.expect(authors).to.include(pm.environment.get('firstUser'))",
											"    })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}/feed",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}",
										"feed"
									]
								},
								"description": "Retrieves all (non-deleted) tweets authored by the user with the given username, as well as all (non-deleted) tweets authored by users the given user is following. This includes simple tweets, reposts, and replies. The tweets should appear in reverse-chronological order. If no active user with that username exists (deleted or never created), an error should be sent in lieu of a response.\n\n#### Response\n```\n[ // Array of Tweets\n\t{\n\t\t\"id\": integer,\n\t\t\"author\": {\n\t\t\t\"username\": \"string\",\n\t\t\t\"profile\": {\n\t\t\t\t\"firstName\"?: \"string\",\n\t\t\t\t\"lastName\"?: \"string\",\n\t\t\t\t\"email\": \"string\",\n\t\t\t\t\"phone\"?: \"string\"\n\t\t\t},\n\t\t\t\"joined\": timestamp\n\t\t},\n\t\t\"posted\": timestamp,\n\t\t\"content\"?: \"string\",\n\t\t\"inReplyTo\"?: {Tweet},\n\t\t\"repostOf\"?: {Tweet}\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "Get FirstUser Tweets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7042b4d-85f1-4cc4-92d9-33009f4446c4",
										"exec": [
											"const tweetSchema = pm.environment.get('tweetSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of tweet dto\\'s',",
											"    items: { $ref: tweetSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"if (pm.response.code >= 200 && pm.response.code < 300 && pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const content = pm.response.json().map(tweet => tweet.content)",
											"    const authors = pm.response.json().map(tweet => tweet.author.username)",
											"    ",
											"    pm.test('Only contains the firstUser\\'s tweet', () => {",
											"        pm.expect(content).to.include(`Tweet from the first user! @${pm.environment.get('secondUser')} #${pm.environment.get('firstTag')}`)",
											"        pm.expect(authors).to.include(pm.environment.get('firstUser'))",
											"        pm.expect(authors).to.not.include(pm.environment.get('secondUser'))",
											"    })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}/tweets",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}",
										"tweets"
									]
								},
								"description": "Retrieves all (non-deleted) tweets authored by the user with the given username. This includes simple tweets, reposts, and replies. The tweets should appear in reverse-chronological order. If no active user with that username exists (deleted or never created), an error should be sent in lieu of a response.\n\n#### Response\n```\n[ // Array of Tweets\n\t{\n\t\t\"id\": integer,\n\t\t\"author\": {\n\t\t\t\"username\": \"string\",\n\t\t\t\"profile\": {\n\t\t\t\t\"firstName\"?: \"string\",\n\t\t\t\t\"lastName\"?: \"string\",\n\t\t\t\t\"email\": \"string\",\n\t\t\t\t\"phone\"?: \"string\"\n\t\t\t},\n\t\t\t\"joined\": timestamp\n\t\t},\n\t\t\"posted\": timestamp,\n\t\t\"content\"?: \"string\",\n\t\t\"inReplyTo\"?: {Tweet},\n\t\t\"repostOf\"?: {Tweet}\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "Get FirstUser Mentions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "137f38dc-b49b-477b-8612-3678aa37959c",
										"exec": [
											"const tweetSchema = pm.environment.get('tweetSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of tweet dto\\'s',",
											"    items: { $ref: tweetSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"if (pm.response.code >= 200 && pm.response.code < 300 && pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    if (pm.response.json().length > 0) {",
											"        const authors = pm.response.json().map(tweet => tweet.author.username)",
											"        pm.test('Should only contain tweets by secondUser', () => {",
											"            pm.expect(authors).to.include(pm.environment.get('secondUser'))",
											"            pm.expect(authors).to.not.include(pm.environment.get('firstUser'))",
											"        })",
											"    } else {",
											"        pm.test('Should be empty', () => {",
											"            pm.expect(pm.response.json().length).to.eql(0)",
											"        })",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}/mentions",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}",
										"mentions"
									]
								},
								"description": "Retrieves all (non-deleted) tweets in which the user with the given username is mentioned. The tweets should appear in reverse-chronological order. If no active user with that username exists, an error should be sent in lieu of a response.\n\nA user is considered \"mentioned\" by a tweet if the tweet has content and the user's username appears in that content following a ```@```.\n\n#### Response\n```\n[ // Array of Tweets\n\t{\n\t\t\"id\": integer,\n\t\t\"author\": {\n\t\t\t\"username\": \"string\",\n\t\t\t\"profile\": {\n\t\t\t\t\"firstName\"?: \"string\",\n\t\t\t\t\"lastName\"?: \"string\",\n\t\t\t\t\"email\": \"string\",\n\t\t\t\t\"phone\"?: \"string\"\n\t\t\t},\n\t\t\t\"joined\": timestamp\n\t\t},\n\t\t\"posted\": timestamp,\n\t\t\"content\"?: \"string\",\n\t\t\"inReplyTo\"?: {Tweet},\n\t\t\"repostOf\"?: {Tweet}\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "Get SecondUser Mentions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b3dc82d-ed73-434e-b980-71274e47dad5",
										"exec": [
											"const tweetSchema = pm.environment.get('tweetSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of tweet dto\\'s',",
											"    items: { $ref: tweetSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"if (pm.response.code >= 200 && pm.response.code < 300 && pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const content = pm.response.json().map(tweet => tweet.content)",
											"    const authors = pm.response.json().map(tweet => tweet.author.username)",
											"    ",
											"    pm.test('Contains the firstUser\\'s tweet', () => {",
											"        pm.expect(content).to.include(`Tweet from the first user! @${pm.environment.get('secondUser')} #${pm.environment.get('firstTag')}`)",
											"        pm.expect(authors).to.include(pm.environment.get('firstUser'))",
											"    })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}/mentions",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}",
										"mentions"
									]
								},
								"description": "Retrieves all (non-deleted) tweets in which the user with the given username is mentioned. The tweets should appear in reverse-chronological order. If no active user with that username exists, an error should be sent in lieu of a response.\n\nA user is considered \"mentioned\" by a tweet if the tweet has content and the user's username appears in that content following a ```@```.\n\n#### Response\n```\n[ // Array of Tweets\n\t{\n\t\t\"id\": integer,\n\t\t\"author\": {\n\t\t\t\"username\": \"string\",\n\t\t\t\"profile\": {\n\t\t\t\t\"firstName\"?: \"string\",\n\t\t\t\t\"lastName\"?: \"string\",\n\t\t\t\t\"email\": \"string\",\n\t\t\t\t\"phone\"?: \"string\"\n\t\t\t},\n\t\t\t\"joined\": timestamp\n\t\t},\n\t\t\"posted\": timestamp,\n\t\t\"content\"?: \"string\",\n\t\t\"inReplyTo\"?: {Tweet},\n\t\t\"repostOf\"?: {Tweet}\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "SecondUser Post Tweet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('tweetSchema')",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test(\"Tweet has id\", () => {",
											"    pm.expect(pm.response.json().id).to.not.eql(null)",
											"    pm.environment.set(\"secondTweetId\", pm.response.json().id)",
											"})",
											"",
											"pm.test(\"Author is correct\", () => {",
											"    const author = pm.response.json().author",
											"    pm.expect(author.username).to.eql(pm.environment.get(\"secondUser\"))",
											"    pm.expect(new Date(author.joined)).to.eql(new Date(pm.environment.get(\"secondUserJoined\")))",
											"    const profile = author.profile",
											"    pm.expect(profile.firstName).to.eql(pm.environment.get(\"secondUserFirstName\"))",
											"    pm.expect(profile.lastName).to.eql(pm.environment.get(\"secondUserLastName\"))",
											"    pm.expect(profile.email).to.eql(pm.environment.get(\"secondUserEmail\"))",
											"    pm.expect(profile.phone).to.eql(pm.environment.get(\"secondUserPhone\"))",
											"})",
											"",
											"pm.test(\"Tweet has date posted\", () => {",
											"    pm.expect(pm.response.json().posted).to.not.eql(null)",
											"})",
											"",
											"pm.test(\"Tweet content is correct\", () => {",
											"    pm.expect(pm.response.json().content).to.eql(`Tweet from the second user! @${pm.environment.get(\"firstUser\")} #${pm.environment.get(\"secondTag\")}`)",
											"})"
										],
										"type": "text/javascript",
										"id": "b70c4b4e-af88-4fd1-a0b6-5bc525c0683d"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"content\": \"{{secondUserTweet}}\",\n  \"credentials\": {\n    \"username\": \"{{secondUser}}\",\n    \"password\": \"{{password}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/tweets",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets"
									]
								},
								"description": "Creates a new simple tweet, with the author set to the user indentified by the credentials in the request body. If the given credentials do not match an active user in the database, an error should be sent in lieu of a resopnse.\n\nThe response should contain the newly-created tweet.\n\nBecause this always creates a simple tweet, it must have a content property and may not have inReplyTo or repostOf properties.\n\nIMPORTANT: when a tweet with content is created, the server must process the tweet's content for @{username} mentions and #{hashtag} tags. There is no way to create hashtags or create mentions from the API, so this must be handled automatically!\n\nRequest:\n{\n  \"content\": \"{content}\",\n  \"credentials\": {\n    \"username\": \"{username}\"\n    \"password\": \"{password}\"\n  }\n}\n\nResponse:\n{\n  \"id\": {id},\n  \"content\": \"{content}\",\n  \"posted\": {postedDate}\n  \"author\": {\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n      \"email\": \"{email}\",\n      \"firstName\": \"{firstname}\",\n      \"lastName\": \"{lastname}\",\n      \"phone\": \"{phoneNumber}\"\n    }\n  }\n}"
							},
							"response": []
						},
						{
							"name": "Get SecondUser Feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b0cd115-dc1d-4cdf-8cbb-d2ae144ae9b4",
										"exec": [
											"const tweetSchema = pm.environment.get('tweetSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of tweet dto\\'s',",
											"    items: { $ref: tweetSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"if (pm.response.code >= 200 && pm.response.code < 300 && pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const content = pm.response.json().map(tweet => tweet.content)",
											"    const authors = pm.response.json().map(tweet => tweet.author.username)",
											"    ",
											"    pm.test('Contains the firstUser\\'s tweet', () => {",
											"        pm.expect(content).to.include(`Tweet from the first user! @${pm.environment.get('secondUser')} #${pm.environment.get('firstTag')}`)",
											"        pm.expect(authors).to.include(pm.environment.get('firstUser'))",
											"    })",
											"    ",
											"    pm.test('Contains the secondUser\\'s tweet', () => {",
											"        pm.expect(content).to.include(`Tweet from the second user! @${pm.environment.get('firstUser')} #${pm.environment.get('secondTag')}`)",
											"        pm.expect(authors).to.include(pm.environment.get('secondUser'))",
											"    })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}/feed",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}",
										"feed"
									]
								},
								"description": "Retrieves all (non-deleted) tweets authored by the user with the given username, as well as all (non-deleted) tweets authored by users the given user is following. This includes simple tweets, reposts, and replies. The tweets should appear in reverse-chronological order. If no active user with that username exists (deleted or never created), an error should be sent in lieu of a response.\n\n#### Response\n```\n[ // Array of Tweets\n\t{\n\t\t\"id\": integer,\n\t\t\"author\": {\n\t\t\t\"username\": \"string\",\n\t\t\t\"profile\": {\n\t\t\t\t\"firstName\"?: \"string\",\n\t\t\t\t\"lastName\"?: \"string\",\n\t\t\t\t\"email\": \"string\",\n\t\t\t\t\"phone\"?: \"string\"\n\t\t\t},\n\t\t\t\"joined\": timestamp\n\t\t},\n\t\t\"posted\": timestamp,\n\t\t\"content\"?: \"string\",\n\t\t\"inReplyTo\"?: {Tweet},\n\t\t\"repostOf\"?: {Tweet}\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "Get SecondUser Tweets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d0899e1-b8db-414e-a5b4-b1343c533ac5",
										"exec": [
											"const tweetSchema = pm.environment.get('tweetSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of tweet dto\\'s',",
											"    items: { $ref: tweetSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"if (pm.response.code >= 200 && pm.response.code < 300 && pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const content = pm.response.json().map(tweet => tweet.content)",
											"    const authors = pm.response.json().map(tweet => tweet.author.username)",
											"    ",
											"    pm.test('Only contains the secondUser\\'s tweet', () => {",
											"        pm.expect(content).to.include(`Tweet from the second user! @${pm.environment.get('firstUser')} #${pm.environment.get('secondTag')}`)",
											"        pm.expect(authors).to.include(pm.environment.get('secondUser'))",
											"        pm.expect(authors).to.not.include(pm.environment.get('firstUser'))",
											"    })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{secondUser}}/tweets",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{secondUser}}",
										"tweets"
									]
								},
								"description": "Retrieves all (non-deleted) tweets authored by the user with the given username. This includes simple tweets, reposts, and replies. The tweets should appear in reverse-chronological order. If no active user with that username exists (deleted or never created), an error should be sent in lieu of a response.\n\n#### Response\n```\n[ // Array of Tweets\n\t{\n\t\t\"id\": integer,\n\t\t\"author\": {\n\t\t\t\"username\": \"string\",\n\t\t\t\"profile\": {\n\t\t\t\t\"firstName\"?: \"string\",\n\t\t\t\t\"lastName\"?: \"string\",\n\t\t\t\t\"email\": \"string\",\n\t\t\t\t\"phone\"?: \"string\"\n\t\t\t},\n\t\t\t\"joined\": timestamp\n\t\t},\n\t\t\"posted\": timestamp,\n\t\t\"content\"?: \"string\",\n\t\t\"inReplyTo\"?: {Tweet},\n\t\t\"repostOf\"?: {Tweet}\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						},
						{
							"name": "Get FirstUser Mentions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e6eab26-5f46-412d-88db-b1d843bc65f8",
										"exec": [
											"const tweetSchema = pm.environment.get('tweetSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of tweet dto\\'s',",
											"    items: { $ref: tweetSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"if (pm.response.code >= 200 && pm.response.code < 300 && pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const content = pm.response.json().map(tweet => tweet.content)",
											"    const authors = pm.response.json().map(tweet => tweet.author.username)",
											"    ",
											"    pm.test('Contains the secondUser\\'s tweet', () => {",
											"        pm.expect(content).to.include(`Tweet from the second user! @${pm.environment.get('firstUser')} #${pm.environment.get('secondTag')}`)",
											"        pm.expect(authors).to.include(pm.environment.get('secondUser'))",
											"    })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/users/@{{firstUser}}/mentions",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										"@{{firstUser}}",
										"mentions"
									]
								},
								"description": "Retrieves all (non-deleted) tweets in which the user with the given username is mentioned. The tweets should appear in reverse-chronological order. If no active user with that username exists, an error should be sent in lieu of a response.\n\nA user is considered \"mentioned\" by a tweet if the tweet has content and the user's username appears in that content following a ```@```.\n\n#### Response\n```\n[ // Array of Tweets\n\t{\n\t\t\"id\": integer,\n\t\t\"author\": {\n\t\t\t\"username\": \"string\",\n\t\t\t\"profile\": {\n\t\t\t\t\"firstName\"?: \"string\",\n\t\t\t\t\"lastName\"?: \"string\",\n\t\t\t\t\"email\": \"string\",\n\t\t\t\t\"phone\"?: \"string\"\n\t\t\t},\n\t\t\t\"joined\": timestamp\n\t\t},\n\t\t\"posted\": timestamp,\n\t\t\"content\"?: \"string\",\n\t\t\"inReplyTo\"?: {Tweet},\n\t\t\"repostOf\"?: {Tweet}\n\t}\n]\n```\n\n* Remember that question marks denote optional values."
							},
							"response": []
						}
					],
					"description": "Tests for creating new tweets and validating tags are created as well.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tweet Tags and Mentions",
					"item": [
						{
							"name": "Get RandomTweet Tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status error', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "9ddb45db-4f47-476c-90ce-6df84a601b3b"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tweets/randomTweet/tags",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"randomTweet",
										"tags"
									]
								},
								"description": "Retrieves the tags associated with the tweet with the given id. If that tweet is deleted or otherwise doesn't exist, an error should be sent in lieu of a resonse.\n\nIMPORTANT: Remember that tags and mentions must be parsed by the server!\n\nResponse:\n[\n  {\n    \"firstUsed\": {firstUsedDate},\n    \"label\": \"{label}\",\n    \"lastUsed\": {lastUsedDate}\n  }\n]"
							},
							"response": []
						},
						{
							"name": "Get FirstTweet Tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hashtagSchema = pm.environment.get('hashtagSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of hashtag dto\\'s',",
											"    items: { $ref: hashtagSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Should contain two values', () => {",
											"    pm.expect(pm.response.json().length).to.eql(1)",
											"})",
											"",
											"pm.test('Should contain the first hashtag', () => {",
											"    const hashtags = pm.response.json().map(hashtag => hashtag.label)",
											"    pm.expect(hashtags).to.include(pm.environment.get('firstTag'))",
											"})"
										],
										"type": "text/javascript",
										"id": "7a950541-cb6c-46db-ba00-24f23d685902"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tweets/{{firstTweetId}}/tags",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{firstTweetId}}",
										"tags"
									]
								},
								"description": "Retrieves the tags associated with the tweet with the given id. If that tweet is deleted or otherwise doesn't exist, an error should be sent in lieu of a resonse.\n\nIMPORTANT: Remember that tags and mentions must be parsed by the server!\n\nResponse:\n[\n  {\n    \"firstUsed\": {firstUsedDate},\n    \"label\": \"{label}\",\n    \"lastUsed\": {lastUsedDate}\n  }\n]"
							},
							"response": []
						},
						{
							"name": "Get SecondTweet Tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hashtagSchema = pm.environment.get('hashtagSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of hashtag dto\\'s',",
											"    items: { $ref: hashtagSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Should contain two values', () => {",
											"    pm.expect(pm.response.json().length).to.eql(1)",
											"})",
											"",
											"pm.test('Should contain the second hashtag', () => {",
											"    const hashtags = pm.response.json().map(hashtag => hashtag.label)",
											"    pm.expect(hashtags).to.include(pm.environment.get('secondTag'))",
											"})"
										],
										"type": "text/javascript",
										"id": "66556366-912d-4199-a74f-b7053c207262"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tweets/{{secondTweetId}}/tags",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{secondTweetId}}",
										"tags"
									]
								},
								"description": "Retrieves the tags associated with the tweet with the given id. If that tweet is deleted or otherwise doesn't exist, an error should be sent in lieu of a resonse.\n\nIMPORTANT: Remember that tags and mentions must be parsed by the server!\n\nResponse:\n[\n  {\n    \"firstUsed\": {firstUsedDate},\n    \"label\": \"{label}\",\n    \"lastUsed\": {lastUsedDate}\n  }\n]"
							},
							"response": []
						},
						{
							"name": "Get FirstTweet Mentions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const userSchema = pm.environment.get('userSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of user dto\\'s',",
											"    items: { $ref: userSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Returns an with only the second user', () => {",
											"    pm.expect(pm.response.json().length).to.eql(1)",
											"})",
											"",
											"if (pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const users = pm.response.json().map(user => user.username)",
											"    ",
											"    pm.test('Contains the secondUser', () => {",
											"        pm.expect(users).to.include(pm.environment.get('secondUser'))",
											"    })",
											"}",
											"",
											""
										],
										"type": "text/javascript",
										"id": "ac7c1919-5959-462f-b354-6f732baaf76e"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tweets/{{firstTweetId}}/mentions",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{firstTweetId}}",
										"mentions"
									]
								},
								"description": "Retrieves the users mentioned in the tweet with the given id. If that tweet is deleted or otherwise doesn't exist, an error should be sent in lieu of a response.\n\nDeleted users should be excluded from the response.\n\nIMPORTANT: Remember that tags and mentions must be parsed by the server!\n\nResponse:\n[\n  {\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n        \"firstName\": \"{firstName}\",\n        \"lastName\": \"{lastName}\",\n        \"email\": \"{email}\",\n        \"phone\": \"{phoneNumber}\"\n    }\n  }\n]"
							},
							"response": []
						},
						{
							"name": "Get SecondTweet Mentions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const userSchema = pm.environment.get('userSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of user dto\\'s',",
											"    items: { $ref: userSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Returns an with only the first user', () => {",
											"    pm.expect(pm.response.json().length).to.eql(1)",
											"})",
											"",
											"if (pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const users = pm.response.json().map(user => user.username)",
											"    ",
											"    pm.test('Contains the firstUser', () => {",
											"        pm.expect(users).to.include(pm.environment.get('firstUser'))",
											"    })",
											"}",
											""
										],
										"type": "text/javascript",
										"id": "b1da9e5c-360c-4477-b5ea-857000f46fbe"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tweets/{{secondTweetId}}/mentions",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{secondTweetId}}",
										"mentions"
									]
								},
								"description": "Retrieves the users mentioned in the tweet with the given id. If that tweet is deleted or otherwise doesn't exist, an error should be sent in lieu of a response.\n\nDeleted users should be excluded from the response.\n\nIMPORTANT: Remember that tags and mentions must be parsed by the server!\n\nResponse:\n[\n  {\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n        \"firstName\": \"{firstName}\",\n        \"lastName\": \"{lastName}\",\n        \"email\": \"{email}\",\n        \"phone\": \"{phoneNumber}\"\n    }\n  }\n]"
							},
							"response": []
						}
					],
					"description": "Tests for retrieving tags and mentions from tweets.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Tweets",
					"item": [
						{
							"name": "Get All Tweets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ac03292-ba37-432f-be59-0bfe8e44ebb7",
										"exec": [
											"const tweetSchema = pm.environment.get('tweetSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of tweet dto\\'s',",
											"    items: { $ref: tweetSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"if (pm.response.code >= 200 && pm.response.code < 300 && pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const content = pm.response.json().map(tweet => tweet.content)",
											"    const authors = pm.response.json().map(tweet => tweet.author.username)",
											"    ",
											"    pm.test('Contains the firstUser\\'s tweet', () => {",
											"        pm.expect(content).to.include(`Tweet from the first user! @${pm.environment.get('secondUser')} #${pm.environment.get('firstTag')}`)",
											"        pm.expect(authors).to.include(pm.environment.get('firstUser'))",
											"    })",
											"    ",
											"    pm.test('Contains the secondUser\\'s tweet', () => {",
											"        pm.expect(content).to.include(`Tweet from the second user! @${pm.environment.get('firstUser')} #${pm.environment.get('secondTag')}`)",
											"        pm.expect(authors).to.include(pm.environment.get('secondUser'))",
											"    })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tweets",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets"
									]
								},
								"description": "Retrieves all (non-deleted) tweets. The tweets should appear in reverse-chronological order.\n\nResponse:\n[\n  {\n    \"id\": {id},\n    \"content\": \"{content}\",\n    \"posted\": {postedDate}\n    \"author\": {\n      \"username\": \"{username}\",\n      \"joined\": {joinedDate},\n      \"profile\": {\n        \"email\": \"{email}\",\n        \"firstName\": \"{firstname}\",\n        \"lastName\": \"{lastname}\",\n        \"phone\": \"{phoneNumber}\"\n      }\n    }\n  }\n]"
							},
							"response": []
						},
						{
							"name": "Get FirstTweet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('tweetSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Author should be the firstUser', () => {",
											"    pm.expect(pm.response.json().author.username).to.eql(pm.environment.get('firstUser'))",
											"})",
											"",
											"pm.test('Content should be the firstTweet', () => {",
											"     pm.expect(pm.response.json().content).to.eql(`Tweet from the first user! @${pm.environment.get('secondUser')} #${pm.environment.get('firstTag')}`)",
											"})"
										],
										"type": "text/javascript",
										"id": "58a6ba91-379f-470d-8999-4997bc51ea8b"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tweets/{{firstTweetId}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{firstTweetId}}"
									]
								},
								"description": "Retrieves a tweet with a given id. If no such tweet exists, or the given tweet is deleted, an error should be sent in lieu of a response.\n\nResponse:\n{\n  \"id\": {id},\n  \"content\": \"{content}\",\n  \"posted\": {postedDate}\n  \"author\": {\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n      \"email\": \"{email}\",\n      \"firstName\": \"{firstname}\",\n      \"lastName\": \"{lastname}\",\n      \"phone\": \"{phoneNumber}\"\n    }\n  }\n}"
							},
							"response": []
						},
						{
							"name": "Get SecondTweet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('tweetSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Author should be the secondUser', () => {",
											"    pm.expect(pm.response.json().author.username).to.eql(pm.environment.get('secondUser'))",
											"})",
											"",
											"pm.test('Content should be the secondTweet', () => {",
											"     pm.expect(pm.response.json().content).to.eql(`Tweet from the second user! @${pm.environment.get('firstUser')} #${pm.environment.get('secondTag')}`)",
											"})"
										],
										"type": "text/javascript",
										"id": "6f92a92c-dd74-42f3-b7fe-dc704359fb65"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tweets/{{secondTweetId}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{secondTweetId}}"
									]
								},
								"description": "Retrieves a tweet with a given id. If no such tweet exists, or the given tweet is deleted, an error should be sent in lieu of a response.\n\nResponse:\n{\n  \"id\": {id},\n  \"content\": \"{content}\",\n  \"posted\": {postedDate}\n  \"author\": {\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n      \"email\": \"{email}\",\n      \"firstName\": \"{firstname}\",\n      \"lastName\": \"{lastname}\",\n      \"phone\": \"{phoneNumber}\"\n    }\n  }\n}"
							},
							"response": []
						},
						{
							"name": "Get FirstTag",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09ed13c9-9a80-42b0-a9f5-6ae72f3f9a7a",
										"exec": [
											"const tweetSchema = pm.environment.get('tweetSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of tweet dto\\'s',",
											"    items: { $ref: tweetSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"if (pm.response.code >= 200 && pm.response.code < 300 && pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const content = pm.response.json().map(tweet => tweet.content)",
											"    const authors = pm.response.json().map(tweet => tweet.author.username)",
											"    ",
											"    pm.test('Should only contain the first user\\'s tweets', () => {",
											"        pm.expect(authors).to.include(pm.environment.get('firstUser'))",
											"        pm.expect(authors).to.not.include(pm.environment.get('secondUser'))",
											"    })",
											"    ",
											"    pm.test('Contains the firstUser\\'s tweet', () => {",
											"        pm.expect(content).to.include(`Tweet from the first user! @${pm.environment.get('secondUser')} #${pm.environment.get('firstTag')}`)",
											"        pm.expect(authors).to.include(pm.environment.get('firstUser'))",
											"    })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tags/{{firstTag}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tags",
										"{{firstTag}}"
									]
								},
								"description": "Retrieves all (non-deleted) tweets tagged with the given hashtag label. The tweets should appear in reverse-chronological order. If no hashtag with the given label exists, an error should be sent in lieu of a response.\n\nA tweet is considered \"tagged\" by a hashtag if the tweet has content and the hashtag's label appears in that content following a #.\n\nResponse:\n[\n  {\n    \"id\": {id},\n    \"content\": \"{content}\",\n    \"posted\": {postedDate}\n    \"author\": {\n      \"username\": \"{username}\",\n      \"joined\": {joinedDate},\n      \"profile\": {\n        \"email\": \"{email}\",\n        \"firstName\": \"{firstname}\",\n        \"lastName\": \"{lastname}\",\n        \"phone\": \"{phoneNumber}\"\n      }\n    }\n  }\n]"
							},
							"response": []
						},
						{
							"name": "Get SecondTag",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7349c0cf-d179-4e68-8152-a6bb4a545700",
										"exec": [
											"const tweetSchema = pm.environment.get('tweetSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of tweet dto\\'s',",
											"    items: { $ref: tweetSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"if (pm.response.code >= 200 && pm.response.code < 300 && pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const content = pm.response.json().map(tweet => tweet.content)",
											"    const authors = pm.response.json().map(tweet => tweet.author.username)",
											"    ",
											"    pm.test('Should only contain the second user\\'s tweets', () => {",
											"        pm.expect(authors).to.include(pm.environment.get('secondUser'))",
											"        pm.expect(authors).to.not.include(pm.environment.get('firstUser'))",
											"    })",
											"    ",
											"    pm.test('Contains the secondUser\\'s tweet', () => {",
											"        pm.expect(content).to.include(`Tweet from the second user! @${pm.environment.get('firstUser')} #${pm.environment.get('secondTag')}`)",
											"        pm.expect(authors).to.include(pm.environment.get('secondUser'))",
											"    })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tags/{{secondTag}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tags",
										"{{secondTag}}"
									]
								},
								"description": "Retrieves all (non-deleted) tweets tagged with the given hashtag label. The tweets should appear in reverse-chronological order. If no hashtag with the given label exists, an error should be sent in lieu of a response.\n\nA tweet is considered \"tagged\" by a hashtag if the tweet has content and the hashtag's label appears in that content following a #.\n\nResponse:\n[\n  {\n    \"id\": {id},\n    \"content\": \"{content}\",\n    \"posted\": {postedDate}\n    \"author\": {\n      \"username\": \"{username}\",\n      \"joined\": {joinedDate},\n      \"profile\": {\n        \"email\": \"{email}\",\n        \"firstName\": \"{firstname}\",\n        \"lastName\": \"{lastname}\",\n        \"phone\": \"{phoneNumber}\"\n      }\n    }\n  }\n]"
							},
							"response": []
						}
					],
					"description": "Tests for retrieving tweets.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Liking Tweets",
					"item": [
						{
							"name": "FirstUser Like SecondUserTweet",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Should be success', () => {",
											"    pm.response.to.be.success",
											"})"
										],
										"id": "c7caf520-8b35-4396-8b9c-5777fc3a3243"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{firstUser}}\",\n  \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/tweets/{{secondTweetId}}/like",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{secondTweetId}}",
										"like"
									]
								},
								"description": "Creates a \"like\" relationship between the tweet with the given id and the user whose credentials are provided in the request body. If the tweet is deleted or otherwise doesn't exist, or if the given credentials do not match an active user in the database, an error should be sent. Following successful completion of the operation, no response body is sent.\n\nRequest:\n{\n\t\"username\": {{username}},\n\t\"password\": {{password}}\n}"
							},
							"response": []
						},
						{
							"name": "FirstUser Like SecondUserTweet Again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Should be success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Should not be internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"type": "text/javascript",
										"id": "4be60d85-36ec-4ead-9311-e6c2fa3c3cc7"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{firstUser}}\",\n  \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/tweets/{{secondTweetId}}/like",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{secondTweetId}}",
										"like"
									]
								},
								"description": "Creates a \"like\" relationship between the tweet with the given id and the user whose credentials are provided in the request body. If the tweet is deleted or otherwise doesn't exist, or if the given credentials do not match an active user in the database, an error should be sent. Following successful completion of the operation, no response body is sent.\n\nRequest:\n{\n  \"username\": {{username}},\n  \"password\": {{password}}\n}"
							},
							"response": []
						},
						{
							"name": "Get SecondTweet Likes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const userSchema = pm.environment.get('userSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of user dto\\'s',",
											"    items: { $ref: userSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Returns an array with one user', () => {",
											"    pm.expect(pm.response.json().length).to.eql(1)",
											"})",
											"",
											"if (pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const users = pm.response.json().map(user => user.username)",
											"    ",
											"    pm.test('Contains the firstUser', () => {",
											"        pm.expect(users).to.include(pm.environment.get('firstUser'))",
											"    })",
											"}",
											"",
											""
										],
										"type": "text/javascript",
										"id": "b6627f58-60ae-4b40-b97c-4a623ec86989"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tweets/{{secondTweetId}}/likes",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{secondTweetId}}",
										"likes"
									]
								},
								"description": "Retrieves the active users who have liked the tweet with the given id. If that tweet is deleted or otherwise doesn't exist, an error should be sent in lieu of a response.\n\nDeleted users should be excluded from the response.\n\nResponse:\n[\n  {\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n      \"firstName\": \"{firstName}\",\n      \"lastName\": \"{lastName}\",\n      \"email\": \"{email}\",\n      \"phone\": \"{phoneNumber}\"\n    }\n  }\n]"
							},
							"response": []
						}
					],
					"description": "Tests for liking tweets and retrieving users who like tweets.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tweet Replies",
					"item": [
						{
							"name": "FirstUser Reply To SecondUserTweet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('tweetSchema')",
											"",
											"pm.test('Schema is valid', () => {",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Tweet has id', () => {",
											"    pm.expect(pm.response.json().id).to.not.eql(null)",
											"    pm.environment.set('firstUserReplyId', pm.response.json().id)",
											"})",
											"",
											"pm.test('Author is correct', () => {",
											"    const author = pm.response.json().author",
											"    pm.expect(author.username).to.eql(pm.environment.get('firstUser'))",
											"    pm.expect(new Date(author.joined)).to.eql(new Date(pm.environment.get('firstUserJoined')))",
											"    const profile = author.profile",
											"    pm.expect(profile.firstName).to.eql(pm.environment.get('firstUserFirstName'))",
											"    pm.expect(profile.lastName).to.eql(pm.environment.get('firstUserLastName'))",
											"    pm.expect(profile.email).to.eql(pm.environment.get('firstUserEmail'))",
											"    pm.expect(profile.phone).to.eql(pm.environment.get('firstUserPhone'))",
											"})",
											"",
											"pm.test('Tweet has date posted', () => {",
											"    pm.expect(pm.response.json().posted).to.not.eql(null)",
											"})",
											"",
											"pm.test('Tweet content is correct', () => {",
											"    pm.expect(pm.response.json().content).to.eql(pm.environment.get('firstUserReply'))",
											"})"
										],
										"type": "text/javascript",
										"id": "7683b0b1-67b6-4e89-a6b2-fb3be7b55a95"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"content\": \"{{firstUserReply}}\",\n  \"credentials\": {\n    \"username\": \"{{firstUser}}\",\n    \"password\": \"{{password}}\"\n  }\n}"
								},
								"url": {
									"raw": "localhost:8080/tweets/{{secondTweetId}}/reply",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{secondTweetId}}",
										"reply"
									]
								},
								"description": "Creates a reply tweet to the tweet with the given id. The author of the newly-created tweet should match the credentials provided by the request body. If the given tweet is deleted or otherwise doesn't exist, or if the given credentials do not match an active user in the database, an error should be sent in lieu of a response.\n\nBecause this creates a reply tweet, content is not optional. Additionally, notice that the inReplyTo property is not provided by the request. The server must create that relationship.\n\nThe response should contain the newly-created tweet.\n\nIMPORTANT: when a tweet with content is created, the server must process the tweet's content for @{username} mentions and #{hashtag} tags. There is no way to create hashtags or create mentions from the API, so this must be handled automatically!\n\nRequest:\n{\n\t\"content\": \"{content}\",\n\t\"credentials\": {\n\t\t\"username\": \"{username}\",\n\t\t\"password\": \"{password}\"\n\t}\n}\n\nResponse:\n{\n  \"id\": {id},\n  \"content\": \"{content}\",\n  \"posted\": {postedDate}\n  \"author\": {\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n      \"email\": \"{email}\",\n      \"firstName\": \"{firstname}\",\n      \"lastName\": \"{lastname}\",\n      \"phone\": \"{phoneNumber}\"\n    }\n  }\n}"
							},
							"response": []
						},
						{
							"name": "Get SecondTweet Replies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const tweetSchema = pm.environment.get('tweetSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of tweet dto\\'s',",
											"    items: { $ref: tweetSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"if (pm.response.code >= 200 && pm.response.code < 300 && pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const content = pm.response.json().map(tweet => tweet.content)",
											"    const authors = pm.response.json().map(tweet => tweet.author.username)",
											"    ",
											"    pm.test('Author is correct', () => {",
											"        pm.expect(authors).to.include(pm.environment.get('firstUser'))",
											"    })",
											"    ",
											"    pm.test('Tweet content is correct', () => {",
											"        pm.expect(content).to.include(pm.environment.get('firstUserReply'))",
											"    })",
											"}"
										],
										"type": "text/javascript",
										"id": "8a3e99e7-9bed-4544-9ac9-38839d597c46"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tweets/{{secondTweetId}}/replies",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{secondTweetId}}",
										"replies"
									]
								},
								"description": "Retrieves the direct replies to the tweet with the given id. if that tweet is deleted or otherwise doesn't exist, an error should be sent in lieu of a response.\n\nDeleted replies to the tweet should be excluded from the resonse.\n\nResponse:\n[\n  {\n    \"id\": {id},\n    \"content\": \"{context}\",\n    \"posted\": {postedDate}\n    \"author\": {\n      \"username\": \"{username}\",\n      \"joined\": {joinedDate},\n      \"profile\": {\n        \"email\": \"{email}\",\n        \"firstName\": \"{firstname}\",\n        \"lastName\": \"{lastname}\",\n        \"phone\": \"{phoneNumber}\"\n      }\n    },\n  }\n]"
							},
							"response": []
						}
					],
					"description": "Tests for replying to tweets and getting replies to tweets.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Repost Tweets",
					"item": [
						{
							"name": "FirstUser Retweet SecondUserTweet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('tweetSchema')\r",
											"\r",
											"pm.test('Status success', () => {\r",
											"    pm.response.to.be.success\r",
											"})\r",
											"\r",
											"pm.test('Schema is valid', () => {\r",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true\r",
											"})\r",
											"\r",
											"if (pm.response.code >= 200 && pm.response.code < 300 && pm.response.json() !== null && Array.isArray(pm.response.json())) {\r",
											"    const content = pm.response.json().map(tweet => tweet.content)\r",
											"    const authors = pm.response.json().map(tweet => tweet.author.username)\r",
											"    \r",
											"    pm.test('Contains the firstUser\\'s repost', () => {\r",
											"        pm.expect(content).to.include(`Tweet from the second user! @${pm.environment.get('firstUser')} #${pm.environment.get('secondTag')}`)\r",
											"        pm.expect(authors).to.include(pm.environment.get('firstUser'))\r",
											"    })\r",
											"}"
										],
										"type": "text/javascript",
										"id": "f7b2423a-631f-4e10-a32c-4ce3b6a9d116"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{firstUser}}\",\n  \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/tweets/{{secondTweetId}}/repost",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{secondTweetId}}",
										"repost"
									]
								},
								"description": "Creates a repost of the tweet with the given id. The author of the repost should match the credentials provided in the request body. If the given tweet is deleted or otherwise doesn't exist, or the given credentials do not match an active user in the database, an error should be sent in lieu of a response.\n\nBecause this creates a repost tweet, content is not allowed. Additionally, notice that the repostOf property is not provided by the request. The server must create that relationship.\n\nThe response should contain the newly-created tweet.\n\nRequest:\n{\n\t\"username\": \"{username}\",\n\t\"password\": \"{password}\"\n}\n\nResponse:\n{\n  \"id\": {id},\n  \"content\": \"{content}\",\n  \"posted\": {postedDate}\n  \"author\": {\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n      \"email\": \"{email}\",\n      \"firstName\": \"{firstname}\",\n      \"lastName\": \"{lastname}\",\n      \"phone\": \"{phoneNumber}\"\n    }\n  }\n}"
							},
							"response": []
						},
						{
							"name": "Get SecondTweet Reposts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const tweetSchema = pm.environment.get('tweetSchema')",
											"",
											"const schema = {",
											"    type: 'array',",
											"    description: 'An array of tweet dto\\'s',",
											"    items: { $ref: tweetSchema }",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"if (pm.response.code >= 200 && pm.response.code < 300 && pm.response.json() !== null && Array.isArray(pm.response.json())) {",
											"    const content = pm.response.json().map(tweet => tweet.repostOf.content)",
											"    const authors = pm.response.json().map(tweet => tweet.author.username)",
											"    ",
											"    pm.test('Contains the firstUser\\'s repost', () => {",
											"        pm.expect(content).to.include(`Tweet from the second user! @${pm.environment.get('firstUser')} #${pm.environment.get('secondTag')}`)",
											"        pm.expect(authors).to.include(pm.environment.get('firstUser'))",
											"    })",
											"}"
										],
										"type": "text/javascript",
										"id": "35998a99-ceb9-4a56-a5b4-1bb0751443cd"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tweets/{{secondTweetId}}/reposts",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{secondTweetId}}",
										"reposts"
									]
								},
								"description": "Retrieves the direct reposts of the tweet with the given id. If that tweet is deleted or otherwise doesn't exist, an error should be sent in lieu of a response.\n\nDeleted reposts of the tweet should be excluded from the response.\n\nResponse:\n[\n  {\n    \"id\": {id},\n    \"content\": \"{context}\",\n    \"posted\": {postedDate}\n    \"author\": {\n      \"username\": \"{username}\",\n      \"joined\": {joinedDate},\n      \"profile\": {\n        \"email\": \"{email}\",\n        \"firstName\": \"{firstname}\",\n        \"lastName\": \"{lastname}\",\n        \"phone\": \"{phoneNumber}\"\n      }\n    },\n  }\n]"
							},
							"response": []
						}
					],
					"description": "Tests for reposting and getting resposts of tweets.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tweet Context",
					"item": [
						{
							"name": "Get FirstUserReply Context",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const tweetSchema = pm.environment.get('tweetSchema')",
											"",
											"const schema = {",
											"    type: 'object',",
											"    description: 'A context dto',",
											"    properties: {",
											"        target: {",
											"            type: 'object',",
											"            $ref: tweetSchema ",
											"        },",
											"        before: {",
											"            type: 'array',",
											"            items: { $ref: tweetSchema } ",
											"        },",
											"        after: {",
											"            type: 'array',",
											"            items: { $ref: tweetSchema } ",
											"        }",
											"    },",
											"    required: ['target', 'before', 'after'],",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"const target = pm.response.json().target",
											"    ",
											"pm.test('Target id is correct', () => {",
											"    const id = target.id",
											"    pm.expect(id).to.not.eql(null)",
											"    pm.expect(id).to.eql(pm.environment.get('firstUserReplyId'))",
											"})",
											"    ",
											"pm.test('Target author is correct', () => {",
											"    const author = target.author",
											"    pm.expect(author.username).to.eql(pm.environment.get(\"firstUser\"))",
											"    pm.expect(new Date(author.joined)).to.eql(new Date(pm.environment.get(\"firstUserJoined\")))",
											"    const profile = author.profile",
											"    pm.expect(profile.firstName).to.eql(pm.environment.get(\"firstUserFirstName\"))",
											"    pm.expect(profile.lastName).to.eql(pm.environment.get(\"firstUserLastName\"))",
											"    pm.expect(profile.email).to.eql(pm.environment.get(\"firstUserEmail\"))",
											"    pm.expect(profile.phone).to.eql(pm.environment.get(\"firstUserPhone\"))",
											"})",
											"    ",
											"pm.test('Target date posted is not null', () => {",
											"    pm.expect(target.posted).to.not.eql(null)",
											"})",
											"   ",
											"    ",
											"pm.test('Target content is correct', () => {",
											"    pm.expect(target.content).to.eql(pm.environment.get('firstUserReply'))",
											"})",
											"",
											"pm.test('Before is correct', () => {",
											"    const before = pm.response.json().before",
											"    pm.expect(Array.isArray(before)).to.be.true",
											"    pm.expect(before.length).to.eql(1)",
											"    ",
											"    const authors = before.map(tweet => tweet.author.username)",
											"    pm.expect(authors).to.include(pm.environment.get('secondUser'))",
											"    ",
											"    const content = before.map(tweet => tweet.content)",
											"    pm.expect(content).to.include(`Tweet from the second user! @${pm.environment.get('firstUser')} #${pm.environment.get('secondTag')}`)",
											"})",
											"",
											"pm.test('After is correct', () => {",
											"    const after = pm.response.json().after",
											"    pm.expect(Array.isArray(after)).to.be.true",
											"    pm.expect(after.length).to.eql(0)",
											"})",
											"",
											""
										],
										"type": "text/javascript",
										"id": "bed6c6a4-9c96-4b4a-91ed-3d528b04645e"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tweets/{{firstUserReplyId}}/context",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{firstUserReplyId}}",
										"context"
									]
								},
								"description": "Retrieves the context of the tweet with the given id. If that tweet is deleted or otherwise doesn't exist, an error should be sent in lieu of a response.\n\nIMPORTANT: While deleted tweets should not be included in the before and after properties of the result, transitive replies should. What that means is that if a reply to the target of the context is deleted, but there's another reply to the deleted reply, the deleted reply should be excluded but the other reply should remain.\n\nResponse:\n{\n  \"after\": [{\n      \"id\": {id},\n      \"content\": \"{context}\",\n      \"posted\": {postedDate}\n      \"author\": {\n        \"username\": \"{username}\",\n        \"joined\": {joinedDate},\n        \"profile\": {\n          \"email\": \"{email}\",\n          \"firstName\": \"{firstname}\",\n          \"lastName\": \"{lastname}\",\n          \"phone\": \"{phoneNumber}\"\n        }\n      },\n    }\n  ],\n  \"before\": [\n    {\n      \"id\": {id},\n      \"content\": \"{context}\",\n      \"posted\": {postedDate}\n      \"author\": {\n        \"username\": \"{username}\",\n        \"joined\": {joinedDate},\n        \"profile\": {\n          \"email\": \"{email}\",\n          \"firstName\": \"{firstname}\",\n          \"lastName\": \"{lastname}\",\n          \"phone\": \"{phoneNumber}\"\n        }\n      },\n    }\n  ],\n  \"target\": {\n      \"id\": {id},\n      \"content\": \"{context}\",\n      \"posted\": {postedDate}\n      \"author\": {\n        \"username\": \"{username}\",\n        \"joined\": {joinedDate},\n        \"profile\": {\n          \"email\": \"{email}\",\n          \"firstName\": \"{firstname}\",\n          \"lastName\": \"{lastname}\",\n          \"phone\": \"{phoneNumber}\"\n        }\n      },\n    }\n}\n"
							},
							"response": []
						},
						{
							"name": "Get SecondTweet Context",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const tweetSchema = pm.environment.get('tweetSchema')",
											"",
											"const schema = {",
											"    type: 'object',",
											"    description: 'A context dto',",
											"    properties: {",
											"        target: {",
											"            type: 'object',",
											"            $ref: tweetSchema ",
											"        },",
											"        before: {",
											"            type: 'array',",
											"            items: { $ref: tweetSchema } ",
											"        },",
											"        after: {",
											"            type: 'array',",
											"            items: { $ref: tweetSchema } ",
											"        }",
											"    },",
											"    required: ['target', 'before', 'after'],",
											"}",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"    ",
											"pm.test('Target id is correct', () => {",
											"    const target = pm.response.json().target",
											"    const id = target.id",
											"    pm.expect(id).to.not.eql(null)",
											"    pm.expect(id).to.eql(pm.environment.get('secondTweetId'))",
											"})",
											"    ",
											"pm.test('Target author is correct', () => {",
											"    const target = pm.response.json().target",
											"    const author = target.author",
											"    pm.expect(author.username).to.eql(pm.environment.get(\"secondUser\"))",
											"    pm.expect(new Date(author.joined)).to.eql(new Date(pm.environment.get(\"secondUserJoined\")))",
											"    const profile = author.profile",
											"    pm.expect(profile.firstName).to.eql(pm.environment.get(\"secondUserFirstName\"))",
											"    pm.expect(profile.lastName).to.eql(pm.environment.get(\"secondUserLastName\"))",
											"    pm.expect(profile.email).to.eql(pm.environment.get(\"secondUserEmail\"))",
											"    pm.expect(profile.phone).to.eql(pm.environment.get(\"secondUserPhone\"))",
											"})",
											"    ",
											"pm.test('Target date posted is not null', () => {",
											"    const target = pm.response.json().target",
											"    pm.expect(target.posted).to.not.eql(null)",
											"})",
											"   ",
											"    ",
											"pm.test('Target content is correct', () => {",
											"    const target = pm.response.json().target",
											"    pm.expect(target.content).to.eql(`Tweet from the second user! @${pm.environment.get(\"firstUser\")} #${pm.environment.get(\"secondTag\")}`)",
											"})",
											"",
											"pm.test('Before is correct', () => {",
											"    const before = pm.response.json().before",
											"    pm.expect(Array.isArray(before)).to.be.true",
											"    pm.expect(before.length).to.eql(0)",
											"})",
											"",
											"pm.test('After is correct', () => {",
											"    const after = pm.response.json().after",
											"    pm.expect(Array.isArray(after)).to.be.true",
											"    pm.expect(after.length).to.eql(1)",
											"    ",
											"    const authors = after.map(tweet => tweet.author.username)",
											"    pm.expect(authors).to.include(pm.environment.get('firstUser'))",
											"    ",
											"    const content = after.map(tweet => tweet.content)",
											"    pm.expect(content).to.include(pm.environment.get('firstUserReply'))",
											"})",
											""
										],
										"type": "text/javascript",
										"id": "ea0a4cd1-b9ea-4835-9088-45bcd45aea6e"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tweets/{{secondTweetId}}/context",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{secondTweetId}}",
										"context"
									]
								},
								"description": "Retrieves the context of the tweet with the given id. If that tweet is deleted or otherwise doesn't exist, an error should be sent in lieu of a response.\n\nIMPORTANT: While deleted tweets should not be included in the before and after properties of the result, transitive replies should. What that means is that if a reply to the target of the context is deleted, but there's another reply to the deleted reply, the deleted reply should be excluded but the other reply should remain.\n\nResponse:\n{\n  \"after\": [{\n      \"id\": {id},\n      \"content\": \"{context}\",\n      \"posted\": {postedDate}\n      \"author\": {\n        \"username\": \"{username}\",\n        \"joined\": {joinedDate},\n        \"profile\": {\n          \"email\": \"{email}\",\n          \"firstName\": \"{firstname}\",\n          \"lastName\": \"{lastname}\",\n          \"phone\": \"{phoneNumber}\"\n        }\n      },\n    }\n  ],\n  \"before\": [\n    {\n      \"id\": {id},\n      \"content\": \"{context}\",\n      \"posted\": {postedDate}\n      \"author\": {\n        \"username\": \"{username}\",\n        \"joined\": {joinedDate},\n        \"profile\": {\n          \"email\": \"{email}\",\n          \"firstName\": \"{firstname}\",\n          \"lastName\": \"{lastname}\",\n          \"phone\": \"{phoneNumber}\"\n        }\n      },\n    }\n  ],\n  \"target\": {\n      \"id\": {id},\n      \"content\": \"{context}\",\n      \"posted\": {postedDate}\n      \"author\": {\n        \"username\": \"{username}\",\n        \"joined\": {joinedDate},\n        \"profile\": {\n          \"email\": \"{email}\",\n          \"firstName\": \"{firstname}\",\n          \"lastName\": \"{lastname}\",\n          \"phone\": \"{phoneNumber}\"\n        }\n      },\n    }\n}\n"
							},
							"response": []
						}
					],
					"description": "Tests for the context endpoint of tweets.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Tweet",
					"item": [
						{
							"name": "Delete RandomTweet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status not success', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"type": "text/javascript",
										"id": "01d5465b-9db8-45c1-b0f7-b447be925cf7"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{firstUser}}\",\n\t\"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/tweets/randomTweet",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"randomTweet"
									]
								},
								"description": "\"Deletes\" the tweet with the given id. If no such tweet exists or the provided credentials do not match author of the tweet, an error should be sent in lieu of a response. If a tweet is successfully \"deleted\", the response should contain the tweet data prior to deletion.\n\nIMPORTANT: This action should not actually drop any records from the database! Instead, develop a way to keep track of \"deleted\" tweets so that even if a tweet is deleted, data with relationships to it (like replies and reposts) are still intact.\n\nRequest:\n{\n  \"username\": \"{username}\",\n  \"password\": \"{password}\"\n}\n\nResponse:\n{\n  \"id\": {id},\n  \"content\": \"{content}\",\n  \"posted\": {postedDate}\n  \"author\": {\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n      \"email\": \"{email}\",\n      \"firstName\": \"{firstname}\",\n      \"lastName\": \"{lastname}\",\n      \"phone\": \"{phoneNumber}\"\n    }\n  }\n}"
							},
							"response": []
						},
						{
							"name": "Delete FirstTweet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('tweetSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Author should be the firstUser', () => {",
											"    pm.expect(pm.response.json().author.username).to.eql(pm.environment.get('firstUser'))",
											"})",
											"",
											"pm.test('Content should be the firstTweet', () => {",
											"     pm.expect(pm.response.json().content).to.eql(`Tweet from the first user! @${pm.environment.get('secondUser')} #${pm.environment.get('firstTag')}`)",
											"})"
										],
										"type": "text/javascript",
										"id": "4adc937f-2d5a-4a9b-8901-3fb103f47d4e"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{firstUser}}\",\n\t\"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/tweets/{{firstTweetId}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{firstTweetId}}"
									]
								},
								"description": "\"Deletes\" the tweet with the given id. If no such tweet exists or the provided credentials do not match author of the tweet, an error should be sent in lieu of a response. If a tweet is successfully \"deleted\", the response should contain the tweet data prior to deletion.\n\nIMPORTANT: This action should not actually drop any records from the database! Instead, develop a way to keep track of \"deleted\" tweets so that even if a tweet is deleted, data with relationships to it (like replies and reposts) are still intact.\n\nRequest:\n{\n  \"username\": \"{username}\",\n  \"password\": \"{password}\"\n}\n\nResponse:\n{\n  \"id\": {id},\n  \"content\": \"{content}\",\n  \"posted\": {postedDate}\n  \"author\": {\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n      \"email\": \"{email}\",\n      \"firstName\": \"{firstname}\",\n      \"lastName\": \"{lastname}\",\n      \"phone\": \"{phoneNumber}\"\n    }\n  }\n}"
							},
							"response": []
						},
						{
							"name": "Delete SecondTweet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('tweetSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Author should be the secondUser', () => {",
											"    pm.expect(pm.response.json().author.username).to.eql(pm.environment.get('secondUser'))",
											"})",
											"",
											"pm.test('Content should be the secondTweet', () => {",
											"     pm.expect(pm.response.json().content).to.eql(`Tweet from the second user! @${pm.environment.get('firstUser')} #${pm.environment.get('secondTag')}`)",
											"})"
										],
										"type": "text/javascript",
										"id": "555229c5-e8e6-4756-9f15-1906a560b14d"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{secondUser}}\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/tweets/{{secondTweetId}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{secondTweetId}}"
									]
								},
								"description": "\"Deletes\" the tweet with the given id. If no such tweet exists or the provided credentials do not match author of the tweet, an error should be sent in lieu of a response. If a tweet is successfully \"deleted\", the response should contain the tweet data prior to deletion.\n\nIMPORTANT: This action should not actually drop any records from the database! Instead, develop a way to keep track of \"deleted\" tweets so that even if a tweet is deleted, data with relationships to it (like replies and reposts) are still intact.\n\nRequest:\n{\n\t\"username\": \"{username}\",\n\t\"password\": \"{password}\"\n}\n\nResponse:\n{\n  \"id\": {id},\n  \"content\": \"{content}\",\n  \"posted\": {postedDate}\n  \"author\": {\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n      \"email\": \"{email}\",\n      \"firstName\": \"{firstname}\",\n      \"lastName\": \"{lastname}\",\n      \"phone\": \"{phoneNumber}\"\n    }\n  }\n}"
							},
							"response": []
						},
						{
							"name": "Delete SecondTweet Again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status not success', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"type": "text/javascript",
										"id": "2920dbb9-aa58-414a-91d7-1520e4e4c0ec"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{secondUser}}\",\n\t\"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "localhost:8080/tweets/{{secondTweetId}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{secondTweetId}}"
									]
								},
								"description": "\"Deletes\" the tweet with the given id. If no such tweet exists or the provided credentials do not match author of the tweet, an error should be sent in lieu of a response. If a tweet is successfully \"deleted\", the response should contain the tweet data prior to deletion.\n\nIMPORTANT: This action should not actually drop any records from the database! Instead, develop a way to keep track of \"deleted\" tweets so that even if a tweet is deleted, data with relationships to it (like replies and reposts) are still intact.\n\nRequest:\n{\n  \"username\": \"{username}\",\n  \"password\": \"{password}\"\n}\n\nResponse:\n{\n  \"id\": {id},\n  \"content\": \"{content}\",\n  \"posted\": {postedDate}\n  \"author\": {\n    \"username\": \"{username}\",\n    \"joined\": {joinedDate},\n    \"profile\": {\n      \"email\": \"{email}\",\n      \"firstName\": \"{firstname}\",\n      \"lastName\": \"{lastname}\",\n      \"phone\": \"{phoneNumber}\"\n    }\n  }\n}"
							},
							"response": []
						},
						{
							"name": "Get SecondTweet Context After Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status not success', () => {",
											"    pm.response.to.not.be.success",
											"    pm.response.to.not.be.info",
											"})",
											"",
											"pm.test('Should not be an internal server error', () => {",
											"    pm.response.to.not.be.serverError",
											"})"
										],
										"id": "eed80378-74d1-46b9-8cf5-5071dcc4cbd0"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/tweets/{{secondTweetId}}/context",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tweets",
										"{{secondTweetId}}",
										"context"
									]
								},
								"description": "Retrieves the context of the tweet with the given id. If that tweet is deleted or otherwise doesn't exist, an error should be sent in lieu of a response.\n\nIMPORTANT: While deleted tweets should not be included in the before and after properties of the result, transitive replies should. What that means is that if a reply to the target of the context is deleted, but there's another reply to the deleted reply, the deleted reply should be excluded but the other reply should remain.\n\nResponse:\n{\n  \"after\": [{\n      \"id\": {id},\n      \"content\": \"{context}\",\n      \"posted\": {postedDate}\n      \"author\": {\n        \"username\": \"{username}\",\n        \"joined\": {joinedDate},\n        \"profile\": {\n          \"email\": \"{email}\",\n          \"firstName\": \"{firstname}\",\n          \"lastName\": \"{lastname}\",\n          \"phone\": \"{phoneNumber}\"\n        }\n      },\n    }\n  ],\n  \"before\": [\n    {\n      \"id\": {id},\n      \"content\": \"{context}\",\n      \"posted\": {postedDate}\n      \"author\": {\n        \"username\": \"{username}\",\n        \"joined\": {joinedDate},\n        \"profile\": {\n          \"email\": \"{email}\",\n          \"firstName\": \"{firstname}\",\n          \"lastName\": \"{lastname}\",\n          \"phone\": \"{phoneNumber}\"\n        }\n      },\n    }\n  ],\n  \"target\": {\n      \"id\": {id},\n      \"content\": \"{context}\",\n      \"posted\": {postedDate}\n      \"author\": {\n        \"username\": \"{username}\",\n        \"joined\": {joinedDate},\n        \"profile\": {\n          \"email\": \"{email}\",\n          \"firstName\": \"{firstname}\",\n          \"lastName\": \"{lastname}\",\n          \"phone\": \"{phoneNumber}\"\n        }\n      },\n    }\n}\n"
							},
							"response": []
						}
					],
					"description": "Tests for deleting tweets.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Hashtag",
			"item": [
				{
					"name": "Get All Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const hashtagSchema = pm.environment.get('hashtagSchema')",
									"",
									"const schema = {",
									"    type: 'array',",
									"    description: 'An array of hashtag dto\\'s',",
									"    items: { $ref: hashtagSchema }",
									"}",
									"",
									"pm.test('Status success', () => {",
									"    pm.response.to.be.success",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
									"})",
									"",
									"pm.test('Should contain two values', () => {",
									"    pm.expect(pm.response.json().length).to.eql(2)",
									"})",
									"",
									"pm.test('Should contain the first and second hashtag', () => {",
									"    const hashtags = pm.response.json().map(hashtag => hashtag.label)",
									"    pm.expect(hashtags).to.include(pm.environment.get('firstTag'))",
									"    pm.expect(hashtags).to.include(pm.environment.get('secondTag'))",
									"})"
								],
								"type": "text/javascript",
								"id": "91917ae5-375c-4c2d-ad37-0d9e8171f4ea"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/tags",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"tags"
							]
						},
						"description": "Retrieves all hashtags tracked by the database.\n\nResponse:\n[\n  {\n    \"firstUsed\": {firstUsedDate},\n    \"label\": \"{label}\",\n    \"lastUsed\": {lastUsedDate}\n  }\n]"
					},
					"response": []
				},
				{
					"name": "Get RandomTag",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status error', () => {",
									"    pm.response.to.not.be.success",
									"    pm.response.to.not.be.info",
									"})",
									"",
									"pm.test('Should not be internal server error', () => {",
									"    pm.response.to.not.be.serverError",
									"})"
								],
								"id": "e784497c-4637-4a97-9c56-ab1d28a5d030"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/tags/randomTag",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"tags",
								"randomTag"
							]
						},
						"description": "Retrieves all (non-deleted) tweets tagged with the given hashtag label. The tweets should appear in reverse-chronological order. If no hashtag with the given label exists, an error should be sent in lieu of a response.\n\nA tweet is considered \"tagged\" by a hashtag if the tweet has content and the hashtag's label appears in that content following a #.\n\nResponse:\n[\n  {\n    \"id\": {id},\n    \"content\": \"{content}\",\n    \"posted\": {postedDate}\n    \"author\": {\n      \"username\": \"{username}\",\n      \"joined\": {joinedDate},\n      \"profile\": {\n        \"email\": \"{email}\",\n        \"firstName\": \"{firstname}\",\n        \"lastName\": \"{lastname}\",\n        \"phone\": \"{phoneNumber}\"\n      }\n    }\n  }\n]"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Validate",
			"item": [
				{
					"name": "Tag Validation",
					"item": [
						{
							"name": "RandomTag Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('booleanSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"",
											"pm.test('Should return a boolean', () => {",
											"    pm.expect(typeof(pm.response.json())).to.eql('boolean')",
											"})",
											"",
											"pm.test('Should return false', () => {",
											"    pm.expect(pm.response.json()).to.be.false",
											"})"
										],
										"type": "text/javascript",
										"id": "670d2fbd-cd46-4472-8e41-c3d51ad142a9"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/validate/tag/exists/randomTag",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"validate",
										"tag",
										"exists",
										"randomTag"
									]
								},
								"description": "Initially the \"firstTag\" environment variable should not exist in the student's database.\n\nExpected Status: success\nExpected Response Body: false"
							},
							"response": []
						},
						{
							"name": "FirstTag Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('booleanSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.have.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('FirstTag should exist', () => {",
											"    pm.expect(pm.response.json()).to.be.true",
											"})"
										],
										"type": "text/javascript",
										"id": "6e147fec-8755-4367-9bf3-9e26f767f9d3"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/validate/tag/exists/{{firstTag}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"validate",
										"tag",
										"exists",
										"{{firstTag}}"
									]
								},
								"description": "Now that the firstTag has been created in the firstUser's tweet, we need to verify it exists. Should return true and a success status.\n\nExpected Status: success\nExpected Response Body: true"
							},
							"response": []
						},
						{
							"name": "SecondTag Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('booleanSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.have.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('SecondTag should exist', () => {",
											"    pm.expect(pm.response.json()).to.be.true",
											"})"
										],
										"type": "text/javascript",
										"id": "91561276-5f42-403c-b2d4-a936a5c167b1"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/validate/tag/exists/{{secondTag}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"validate",
										"tag",
										"exists",
										"{{secondTag}}"
									]
								},
								"description": "Now that the secondTag has been created in the secondUser's tweet, we need to verify it exists. Should return true and a success status.\n\nExpected Status: success\nExpected Response Body: true"
							},
							"response": []
						}
					],
					"description": "Tests for the /tag validation endpoint.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "User Validation",
					"item": [
						{
							"name": "RandomUser Available",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('booleanSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"",
											"pm.test('Should return a boolean', () => {",
											"    pm.expect(typeof(pm.response.json())).to.eql('boolean')",
											"})",
											"",
											"pm.test('Should return true', () => {",
											"    pm.expect(pm.response.json()).to.be.true",
											"})"
										],
										"type": "text/javascript",
										"id": "49a95703-88c7-4aae-86e9-96ca6a4e5702"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/validate/username/available/@randomUser",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"validate",
										"username",
										"available",
										"@randomUser"
									]
								},
								"description": "Validates that the /username/available/@{username} endpoint is in the correct format."
							},
							"response": []
						},
						{
							"name": "RandomUser Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('booleanSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"",
											"pm.test('Should return a boolean', () => {",
											"    pm.expect(typeof(pm.response.json())).to.eql('boolean')",
											"})",
											"",
											"pm.test('Should return false', () => {",
											"    pm.expect(pm.response.json()).to.be.false",
											"})"
										],
										"type": "text/javascript",
										"id": "d5b1fc99-b58b-4134-a956-0caadc14c054"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "localhost:8080/validate/username/exists/@randomUser",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"validate",
										"username",
										"exists",
										"@randomUser"
									]
								},
								"description": "Validates that the /username/exists/@{username} endpoint is in the correct format."
							},
							"response": []
						},
						{
							"name": "FirstUser Available After Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('booleanSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Should return a boolean', () => {",
											"    pm.expect(typeof(pm.response.json())).to.eql('boolean')",
											"})",
											"",
											"pm.test('FirstUser should not be available', () => {",
											"    pm.expect(pm.response.json()).to.be.false",
											"})"
										],
										"type": "text/javascript",
										"id": "1dcb6bfe-865a-4511-88e2-65fcbb1c4065"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/validate/username/available/@{{firstUser}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"validate",
										"username",
										"available",
										"@{{firstUser}}"
									]
								},
								"description": "Validates that the /username/available/@{username} endpoint is in the correct format."
							},
							"response": []
						},
						{
							"name": "FirstUser Exists After Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('booleanSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Should return a boolean', () => {",
											"    pm.expect(typeof(pm.response.json())).to.eql('boolean')",
											"})",
											"",
											"pm.test('FirstUser should exist', () => {",
											"    pm.expect(pm.response.json()).to.be.true",
											"})"
										],
										"type": "text/javascript",
										"id": "46ed6d0d-3c55-4a89-bd1e-47559235767e"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/validate/username/exists/@{{firstUser}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"validate",
										"username",
										"exists",
										"@{{firstUser}}"
									]
								},
								"description": "Validates that the /username/available/@{username} endpoint is in the correct format."
							},
							"response": []
						},
						{
							"name": "SecondUser Available After Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('booleanSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Should return a boolean', () => {",
											"    pm.expect(typeof(pm.response.json())).to.eql('boolean')",
											"})",
											"",
											"pm.test('SecondUser should not be available', () => {",
											"    pm.expect(pm.response.json()).to.be.false",
											"})"
										],
										"type": "text/javascript",
										"id": "9e3ff857-cd7d-4cad-b9bb-32081206491c"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/validate/username/available/@{{secondUser}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"validate",
										"username",
										"available",
										"@{{secondUser}}"
									]
								},
								"description": "Validates that the /username/available/@{username} endpoint is in the correct format."
							},
							"response": []
						},
						{
							"name": "SecondUser Exists After Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.environment.get('booleanSchema')",
											"",
											"pm.test('Status success', () => {",
											"    pm.response.to.be.success",
											"})",
											"",
											"pm.test('Schema is valid', () => {",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
											"})",
											"",
											"pm.test('Should return a boolean', () => {",
											"    pm.expect(typeof(pm.response.json())).to.eql('boolean')",
											"})",
											"",
											"pm.test('SecondUser should exist', () => {",
											"    pm.expect(pm.response.json()).to.be.true",
											"})"
										],
										"type": "text/javascript",
										"id": "e4a7d622-d332-4de6-bdf6-e407584c49e1"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/validate/username/exists/@{{secondUser}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"validate",
										"username",
										"exists",
										"@{{secondUser}}"
									]
								},
								"description": "Validates that the /username/available/@{username} endpoint is in the correct format."
							},
							"response": []
						}
					],
					"description": "Test for the /username validation endpoint.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "requests for the validate endpoint.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "FirstUser Unfollow SecondUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "552e84f1-9243-4368-8f74-7f3e4b49c047",
								"exec": [
									"pm.test('Should be success', () => {",
									"    pm.response.to.be.success",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \t\"username\": \"{{firstUser}}\",\n  \t\"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "localhost:8080/users/@{{secondUser}}/unfollow",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"@{{secondUser}}",
								"unfollow"
							]
						},
						"description": "Attempts to unfollow the firstUser without providing the username of the secondUser. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
					},
					"response": []
				},
				{
					"name": "SecondUser Unfollow FirstUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should be success', () => {",
									"    pm.response.to.be.success",
									"})"
								],
								"type": "text/javascript",
								"id": "873fcb9c-5de1-44bd-aa3c-5071a7d46a39"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \t\"username\": \"{{secondUser}}\",\n  \t\"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "localhost:8080/users/@{{firstUser}}/unfollow",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"@{{firstUser}}",
								"unfollow"
							]
						},
						"description": "Attempts to unfollow the firstUser without providing the username of the secondUser. Should return an error status and no body.\n\nExpected Status: error\nExpected Body: none"
					},
					"response": []
				},
				{
					"name": "Delete FirstUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = pm.environment.get('userSchema')",
									"",
									"",
									"pm.test('Success status', () => {",
									"    pm.response.to.be.success",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
									"})",
									"",
									"pm.test('Username is correct', () => {",
									"    pm.expect(pm.response.json().username).to.eql(pm.environment.get('firstUser'))",
									"})",
									"",
									"pm.test('Joined has not been modified', () => {",
									"    pm.expect(new Date(pm.response.json().joined)).to.eql(new Date(pm.environment.get('firstUserJoined')))",
									"})",
									"",
									"pm.test('Profile is correct', () => {",
									"    const profile = pm.response.json().profile",
									"    pm.expect(profile.firstName).to.eql(pm.environment.get('firstUserFirstName'))",
									"    pm.expect(profile.lastName).to.eql(pm.environment.get('firstUserLastName'))",
									"    pm.expect(profile.email).to.eql(pm.environment.get('firstUserEmail'))",
									"    pm.expect(profile.phone).to.eql(pm.environment.get('firstUserPhone'))",
									"})"
								],
								"type": "text/javascript",
								"id": "acb7165d-7731-4c5f-930d-0051bcb2f1c3"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{firstUser}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "localhost:8080/users/@{{firstUser}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"@{{firstUser}}"
							]
						},
						"description": "\"Deletes\" a user with the given username. If no such user exists or the provided credentials do not match the user, an error should be sent in lieu of a response. If a user is successfully \"deleted\", the response should contain the user data prior to deletion.\n\n**IMPORTANT**: This action should not actually drop any records from the database! Instead, develop a way to keep track of \"deleted\" users so that if a user is re-activated, all of their tweets and information are restored.\n\n#### Request\n```\n{\n\t\"credentials\": {\n\t\t\"username\": \"string\",\n\t\t\"password\": \"string\"\n\t}\n}\n```\n\n#### Response\n```\n{ // User\n\t\"username\": \"string\",\n\t\"profile\": {\n\t\t\"firstName\"?: \"string\",\n\t\t\"lastName\"?: \"string\",\n\t\t\"email\": \"string\",\n\t\t\"phone\"?: \"string\"\n\t},\n\t\"joined\": timestamp\n}\n```\n\n* Remember that question marks denote optional values."
					},
					"response": []
				},
				{
					"name": "Delete SecondUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7fba99b-4a96-44fd-9f40-c2433dc64140",
								"exec": [
									"const schema = pm.environment.get('userSchema')",
									"",
									"",
									"pm.test('Success status', () => {",
									"    pm.response.to.be.success",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
									"})",
									"",
									"pm.test('Username is correct', () => {",
									"    pm.expect(pm.response.json().username).to.eql(pm.environment.get('secondUser'))",
									"})",
									"",
									"pm.test('Joined has not been modified', () => {",
									"    pm.expect(new Date(pm.response.json().joined)).to.eql(new Date(pm.environment.get('secondUserJoined')))",
									"})",
									"",
									"pm.test('Profile is correct', () => {",
									"    const profile = pm.response.json().profile",
									"    pm.expect(profile.firstName).to.eql(pm.environment.get('secondUserFirstName'))",
									"    pm.expect(profile.lastName).to.eql(pm.environment.get('secondUserLastName'))",
									"    pm.expect(profile.email).to.eql(pm.environment.get('secondUserEmail'))",
									"    pm.expect(profile.phone).to.eql(pm.environment.get('secondUserPhone'))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{secondUser}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "localhost:8080/users/@{{secondUser}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"@{{secondUser}}"
							]
						},
						"description": "\"Deletes\" a user with the given username. If no such user exists or the provided credentials do not match the user, an error should be sent in lieu of a response. If a user is successfully \"deleted\", the response should contain the user data prior to deletion.\n\n**IMPORTANT**: This action should not actually drop any records from the database! Instead, develop a way to keep track of \"deleted\" users so that if a user is re-activated, all of their tweets and information are restored.\n\n#### Request\n```\n{\n\t\"credentials\": {\n\t\t\"username\": \"string\",\n\t\t\"password\": \"string\"\n\t}\n}\n```\n\n#### Response\n```\n{ // User\n\t\"username\": \"string\",\n\t\"profile\": {\n\t\t\"firstName\"?: \"string\",\n\t\t\"lastName\"?: \"string\",\n\t\t\"email\": \"string\",\n\t\t\"phone\"?: \"string\"\n\t},\n\t\"joined\": timestamp\n}\n```\n\n* Remember that question marks denote optional values."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}